{
    "0": {
        "instruction": "Create a function to calculate the sum of a sequence of integers.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the sum of a sequence of integers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\n# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the sum of a sequence of integers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:\n# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum<|end_of_text|>"
    },
    "1": {
        "instruction": "Generate a Python code for crawling a website for a specific type of data.",
        "input": "website: www.example.com \ndata to crawl: phone numbers",
        "output": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for crawling a website for a specific type of data.\n\n### Input:\nwebsite: www.example.com \ndata to crawl: phone numbers\n\n### Output:\nimport requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for crawling a website for a specific type of data.\n\n### Input:\nwebsite: www.example.com \ndata to crawl: phone numbers\n\n### Response:\nimport requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))<|end_of_text|>"
    },
    "2": {
        "instruction": "Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].",
        "input": "",
        "output": "[x*x for x in [1, 2, 3, 5, 8, 13]]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].\n\n### Input:\n\n\n### Output:\n[x*x for x in [1, 2, 3, 5, 8, 13]]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].\n\n### Input:\n\n\n### Response:\n[x*x for x in [1, 2, 3, 5, 8, 13]]<|end_of_text|>"
    },
    "3": {
        "instruction": "Generate a python script to perform this action.",
        "input": "Given a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"",
        "output": "def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to perform this action.\n\n### Input:\nGiven a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"\n\n### Output:\ndef remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to perform this action.\n\n### Input:\nGiven a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"\n\n### Response:\ndef remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)<|end_of_text|>"
    },
    "4": {
        "instruction": "Write a python script to generates random numbers between 0 and 9 that are divisible by 3.",
        "input": "",
        "output": "def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generates random numbers between 0 and 9 that are divisible by 3.\n\n### Input:\n\n\n### Output:\ndef generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generates random numbers between 0 and 9 that are divisible by 3.\n\n### Input:\n\n\n### Response:\ndef generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process<|end_of_text|>"
    },
    "5": {
        "instruction": "Write a Python code to get the third largest element in a given row.",
        "input": "[12, 13, 13, 45, 22, 99]",
        "output": "def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to get the third largest element in a given row.\n\n### Input:\n[12, 13, 13, 45, 22, 99]\n\n### Output:\ndef third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to get the third largest element in a given row.\n\n### Input:\n[12, 13, 13, 45, 22, 99]\n\n### Response:\ndef third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]<|end_of_text|>"
    },
    "6": {
        "instruction": "Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.",
        "input": "Not applicable",
        "output": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.\n\n### Input:\nNot applicable\n\n### Response:\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)<|end_of_text|>"
    },
    "7": {
        "instruction": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.",
        "input": "'This is a test', ['test', 'this', 'is']",
        "output": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.\n\n### Input:\n'This is a test', ['test', 'this', 'is']\n\n### Output:\ndef contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.\n\n### Input:\n'This is a test', ['test', 'this', 'is']\n\n### Response:\ndef contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True<|end_of_text|>"
    },
    "8": {
        "instruction": "What should this Python program do?",
        "input": "def is_palindrome(s):\n    '''Write your code here.'''",
        "output": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat should this Python program do?\n\n### Input:\ndef is_palindrome(s):\n    '''Write your code here.'''\n\n### Output:\ndef is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat should this Python program do?\n\n### Input:\ndef is_palindrome(s):\n    '''Write your code here.'''\n\n### Response:\ndef is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.<|end_of_text|>"
    },
    "9": {
        "instruction": "Create a Python program to sort and print out the elements of an array of integers.",
        "input": "[17, 41, 5, 22, 54, 6, 29, 3, 13]",
        "output": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort and print out the elements of an array of integers.\n\n### Input:\n[17, 41, 5, 22, 54, 6, 29, 3, 13]\n\n### Output:\narr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort and print out the elements of an array of integers.\n\n### Input:\n[17, 41, 5, 22, 54, 6, 29, 3, 13]\n\n### Response:\narr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]<|end_of_text|>"
    },
    "10": {
        "instruction": "Generate a Python program that adds two then doubles the result.",
        "input": "",
        "output": "def double_add(num1, num2): \n    return (num1 + num2) * 2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that adds two then doubles the result.\n\n### Input:\n\n\n### Output:\ndef double_add(num1, num2): \n    return (num1 + num2) * 2",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that adds two then doubles the result.\n\n### Input:\n\n\n### Response:\ndef double_add(num1, num2): \n    return (num1 + num2) * 2<|end_of_text|>"
    },
    "11": {
        "instruction": "Write a python program to extract the non-vowel words in a sentence.",
        "input": "This machine learning project is challenging.",
        "output": "def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to extract the non-vowel words in a sentence.\n\n### Input:\nThis machine learning project is challenging.\n\n### Output:\ndef extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to extract the non-vowel words in a sentence.\n\n### Input:\nThis machine learning project is challenging.\n\n### Response:\ndef extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words<|end_of_text|>"
    },
    "12": {
        "instruction": "Write a Python program to calculate the average of a list of positive integers and output the result.",
        "input": "List of positive integers: [1, 5, 6, 7, 8]",
        "output": "list_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the average of a list of positive integers and output the result.\n\n### Input:\nList of positive integers: [1, 5, 6, 7, 8]\n\n### Output:\nlist_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the average of a list of positive integers and output the result.\n\n### Input:\nList of positive integers: [1, 5, 6, 7, 8]\n\n### Response:\nlist_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))<|end_of_text|>"
    },
    "13": {
        "instruction": "Develop a function in Python that prints out the Pascal's triangle for a given number of rows.",
        "input": "",
        "output": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that prints out the Pascal's triangle for a given number of rows.\n\n### Input:\n\n\n### Output:\ndef pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that prints out the Pascal's triangle for a given number of rows.\n\n### Input:\n\n\n### Response:\ndef pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)<|end_of_text|>"
    },
    "14": {
        "instruction": "Implement a decision-making algorithm for a rock-paper-scissors game using Python.",
        "input": "",
        "output": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision-making algorithm for a rock-paper-scissors game using Python.\n\n### Input:\n\n\n### Output:\n# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision-making algorithm for a rock-paper-scissors game using Python.\n\n### Input:\n\n\n### Response:\n# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)<|end_of_text|>"
    },
    "15": {
        "instruction": "Collate a machine learning model in Python that distinguishes between cats and dogs.",
        "input": "A dataset of 800 images of cats and dogs",
        "output": "import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCollate a machine learning model in Python that distinguishes between cats and dogs.\n\n### Input:\nA dataset of 800 images of cats and dogs\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCollate a machine learning model in Python that distinguishes between cats and dogs.\n\n### Input:\nA dataset of 800 images of cats and dogs\n\n### Response:\nimport numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)<|end_of_text|>"
    },
    "16": {
        "instruction": "Write a Python program to find all the numbers divisible by a certain number within a certain range.",
        "input": "int m=36, int n=74, int divisor=6",
        "output": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the numbers divisible by a certain number within a certain range.\n\n### Input:\nint m=36, int n=74, int divisor=6\n\n### Output:\ndef find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the numbers divisible by a certain number within a certain range.\n\n### Input:\nint m=36, int n=74, int divisor=6\n\n### Response:\ndef find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers<|end_of_text|>"
    },
    "17": {
        "instruction": "Implement a Python function that will take two strings and return true if the first string contains the second.",
        "input": "query = \"catering\"\nword = \"cat\"",
        "output": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function that will take two strings and return true if the first string contains the second.\n\n### Input:\nquery = \"catering\"\nword = \"cat\"\n\n### Output:\ndef check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function that will take two strings and return true if the first string contains the second.\n\n### Input:\nquery = \"catering\"\nword = \"cat\"\n\n### Response:\ndef check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)<|end_of_text|>"
    },
    "18": {
        "instruction": "Write an algorithm in Python 3 that calculates the factorial of a number.",
        "input": "Not applicable",
        "output": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python 3 that calculates the factorial of a number.\n\n### Input:\nNot applicable\n\n### Output:\ndef factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python 3 that calculates the factorial of a number.\n\n### Input:\nNot applicable\n\n### Response:\ndef factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)<|end_of_text|>"
    },
    "19": {
        "instruction": "Develop a Python function to predict the class labels of a given set of data.",
        "input": "The dataset contains 4 features: Length, Width, Height and Weight.",
        "output": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to predict the class labels of a given set of data.\n\n### Input:\nThe dataset contains 4 features: Length, Width, Height and Weight.\n\n### Output:\n# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to predict the class labels of a given set of data.\n\n### Input:\nThe dataset contains 4 features: Length, Width, Height and Weight.\n\n### Response:\n# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label<|end_of_text|>"
    },
    "20": {
        "instruction": "Develop a Python program to generate random passwords that consist of 8 characters.",
        "input": "Not applicable",
        "output": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate random passwords that consist of 8 characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate random passwords that consist of 8 characters.\n\n### Input:\nNot applicable\n\n### Response:\nimport string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)<|end_of_text|>"
    },
    "21": {
        "instruction": "Generate a list using a while loop in Python and appends the current number to the list.",
        "input": "",
        "output": "my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list using a while loop in Python and appends the current number to the list.\n\n### Input:\n\n\n### Output:\nmy_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list using a while loop in Python and appends the current number to the list.\n\n### Input:\n\n\n### Response:\nmy_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)<|end_of_text|>"
    },
    "22": {
        "instruction": "Write a Python program to query Twitter to get the most recent tweets from a user.",
        "input": "username: @elonmusk",
        "output": "import tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to query Twitter to get the most recent tweets from a user.\n\n### Input:\nusername: @elonmusk\n\n### Output:\nimport tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to query Twitter to get the most recent tweets from a user.\n\n### Input:\nusername: @elonmusk\n\n### Response:\nimport tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)<|end_of_text|>"
    },
    "23": {
        "instruction": "Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.",
        "input": "[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]",
        "output": "import numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.\n\n### Input:\n[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.\n\n### Input:\n[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]\n\n### Response:\nimport numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")<|end_of_text|>"
    },
    "24": {
        "instruction": "Create a way to encrypt a message using a key in Python.",
        "input": "message = \"Hello world!\"\nkey = \"secret\"",
        "output": "import hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a way to encrypt a message using a key in Python.\n\n### Input:\nmessage = \"Hello world!\"\nkey = \"secret\"\n\n### Output:\nimport hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a way to encrypt a message using a key in Python.\n\n### Input:\nmessage = \"Hello world!\"\nkey = \"secret\"\n\n### Response:\nimport hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)<|end_of_text|>"
    },
    "25": {
        "instruction": "Create a function in Python that takes two parameters and prints out the larger of them.",
        "input": "parameter_1 = 7\nparameter_2 = 9",
        "output": "def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two parameters and prints out the larger of them.\n\n### Input:\nparameter_1 = 7\nparameter_2 = 9\n\n### Output:\ndef printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two parameters and prints out the larger of them.\n\n### Input:\nparameter_1 = 7\nparameter_2 = 9\n\n### Response:\ndef printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)<|end_of_text|>"
    },
    "26": {
        "instruction": "Rewrite the following Python code by introducing list comprehensions.",
        "input": "even_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i)",
        "output": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python code by introducing list comprehensions.\n\n### Input:\neven_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i)\n\n### Output:\neven_numbers = [i for i in range(1, 21) if i % 2 == 0]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python code by introducing list comprehensions.\n\n### Input:\neven_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i)\n\n### Response:\neven_numbers = [i for i in range(1, 21) if i % 2 == 0]<|end_of_text|>"
    },
    "27": {
        "instruction": "Develop an algorithm in Python to print Fibonacci series up to a given number.",
        "input": "",
        "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to print Fibonacci series up to a given number.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to print Fibonacci series up to a given number.\n\n### Input:\n\n\n### Response:\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))<|end_of_text|>"
    },
    "28": {
        "instruction": "Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle",
        "input": "board = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]",
        "output": "def solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle\n\n### Input:\nboard = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]\n\n### Output:\ndef solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle\n\n### Input:\nboard = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n]\n\n### Response:\ndef solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")<|end_of_text|>"
    },
    "29": {
        "instruction": "Write a function in Python to calculate the sum of the digits in a given number.",
        "input": "",
        "output": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the sum of the digits in a given number.\n\n### Input:\n\n\n### Output:\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the sum of the digits in a given number.\n\n### Input:\n\n\n### Response:\ndef sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total<|end_of_text|>"
    },
    "30": {
        "instruction": "Take the list of people below and create a Python dictionary with the names as keys and the ages as values.",
        "input": "John (20), Jane (40), Alex (18), Peter (45)",
        "output": "people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the list of people below and create a Python dictionary with the names as keys and the ages as values.\n\n### Input:\nJohn (20), Jane (40), Alex (18), Peter (45)\n\n### Output:\npeople_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the list of people below and create a Python dictionary with the names as keys and the ages as values.\n\n### Input:\nJohn (20), Jane (40), Alex (18), Peter (45)\n\n### Response:\npeople_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}<|end_of_text|>"
    },
    "31": {
        "instruction": "Develop a Python program to clearly understand the concept of recursion.",
        "input": "",
        "output": "# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to clearly understand the concept of recursion.\n\n### Input:\n\n\n### Output:\n# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to clearly understand the concept of recursion.\n\n### Input:\n\n\n### Response:\n# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120<|end_of_text|>"
    },
    "32": {
        "instruction": "Generate a random 6-digits number in Python.",
        "input": "",
        "output": "import random\n\nnumber = random.randint(100000, 999999)\nprint(number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 6-digits number in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(100000, 999999)\nprint(number)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 6-digits number in Python.\n\n### Input:\n\n\n### Response:\nimport random\n\nnumber = random.randint(100000, 999999)\nprint(number)<|end_of_text|>"
    },
    "33": {
        "instruction": "Create a sorting algorithm in Python to sort strings by their length.",
        "input": "[\"cat\", \"dog\", \"apple\", \"banana\"]",
        "output": "def sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python to sort strings by their length.\n\n### Input:\n[\"cat\", \"dog\", \"apple\", \"banana\"]\n\n### Output:\ndef sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python to sort strings by their length.\n\n### Input:\n[\"cat\", \"dog\", \"apple\", \"banana\"]\n\n### Response:\ndef sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)<|end_of_text|>"
    },
    "34": {
        "instruction": "Write a Python function to get the maximum and minimum values in a given list.",
        "input": "Not applicable",
        "output": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the maximum and minimum values in a given list.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the maximum and minimum values in a given list.\n\n### Input:\nNot applicable\n\n### Response:\ndef get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)<|end_of_text|>"
    },
    "35": {
        "instruction": "Create a for loop in Python to iterate over a list of numbers and print only the even numbers.",
        "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "for num in my_list:\n    if num % 2 == 0:\n        print(num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop in Python to iterate over a list of numbers and print only the even numbers.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\nfor num in my_list:\n    if num % 2 == 0:\n        print(num)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop in Python to iterate over a list of numbers and print only the even numbers.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Response:\nfor num in my_list:\n    if num % 2 == 0:\n        print(num)<|end_of_text|>"
    },
    "36": {
        "instruction": "Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?",
        "input": "",
        "output": "myArray = [float(i) for i in range(0,11)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?\n\n### Input:\n\n\n### Output:\nmyArray = [float(i) for i in range(0,11)]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?\n\n### Input:\n\n\n### Response:\nmyArray = [float(i) for i in range(0,11)]<|end_of_text|>"
    },
    "37": {
        "instruction": "Construct a neural network model in Python to classify the MNIST data set correctly.",
        "input": "",
        "output": "import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network model in Python to classify the MNIST data set correctly.\n\n### Input:\n\n\n### Output:\nimport keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a neural network model in Python to classify the MNIST data set correctly.\n\n### Input:\n\n\n### Response:\nimport keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])<|end_of_text|>"
    },
    "38": {
        "instruction": "Create a machine learning classifier in Python for categorizing user input.",
        "input": "",
        "output": "from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python for categorizing user input.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python for categorizing user input.\n\n### Input:\n\n\n### Response:\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction<|end_of_text|>"
    },
    "39": {
        "instruction": "Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.",
        "input": "A = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]",
        "output": "def merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.\n\n### Input:\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\n### Output:\ndef merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.\n\n### Input:\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\n### Response:\ndef merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]<|end_of_text|>"
    },
    "40": {
        "instruction": "Develop a program in Python for finding the longest common subsequence between two strings.",
        "input": "\"ABCDF\", \"ABECD\"",
        "output": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for finding the longest common subsequence between two strings.\n\n### Input:\n\"ABCDF\", \"ABECD\"\n\n### Output:\ndef longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for finding the longest common subsequence between two strings.\n\n### Input:\n\"ABCDF\", \"ABECD\"\n\n### Response:\ndef longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)<|end_of_text|>"
    },
    "41": {
        "instruction": "Convert a given Python program to a C# program.",
        "input": "def power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)",
        "output": "public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given Python program to a C# program.\n\n### Input:\ndef power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)\n\n### Output:\npublic int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given Python program to a C# program.\n\n### Input:\ndef power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1)\n\n### Response:\npublic int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}<|end_of_text|>"
    },
    "42": {
        "instruction": "Rewrite the following code in a different programming language.",
        "input": "// JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});",
        "output": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in a different programming language.\n\n### Input:\n// JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});\n\n### Output:\n# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in a different programming language.\n\n### Input:\n// JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n});\n\n### Response:\n# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)<|end_of_text|>"
    },
    "43": {
        "instruction": "Create a TicTacToe game in Python.",
        "input": "",
        "output": "class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TicTacToe game in Python.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TicTacToe game in Python.\n\n### Input:\n\n\n### Response:\nclass TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False<|end_of_text|>"
    },
    "44": {
        "instruction": "Create a Python program to store the strings \"Hello\" and \"World\" and print them in the same line.",
        "input": "",
        "output": "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to store the strings \"Hello\" and \"World\" and print them in the same line.\n\n### Input:\n\n\n### Output:\nstring1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to store the strings \"Hello\" and \"World\" and print them in the same line.\n\n### Input:\n\n\n### Response:\nstring1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)<|end_of_text|>"
    },
    "45": {
        "instruction": "Use the inputs provided, write Python code to check if two integers are equal.",
        "input": "First Integer: 10\nSecond Integer: 10",
        "output": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the inputs provided, write Python code to check if two integers are equal.\n\n### Input:\nFirst Integer: 10\nSecond Integer: 10\n\n### Output:\nif int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the inputs provided, write Python code to check if two integers are equal.\n\n### Input:\nFirst Integer: 10\nSecond Integer: 10\n\n### Response:\nif int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")<|end_of_text|>"
    },
    "46": {
        "instruction": "Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.",
        "input": "Not applicable",
        "output": "import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.\n\n### Input:\nNot applicable\n\n### Response:\nimport nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition<|end_of_text|>"
    },
    "47": {
        "instruction": "Create a Python program to calculate the average of five numbers entered by a user.",
        "input": "",
        "output": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the average of five numbers entered by a user.\n\n### Input:\n\n\n### Output:\nnums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the average of five numbers entered by a user.\n\n### Input:\n\n\n### Response:\nnums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)<|end_of_text|>"
    },
    "48": {
        "instruction": "Write a Python program to generate a Markov chain given a text input.",
        "input": "Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'",
        "output": "import random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Markov chain given a text input.\n\n### Input:\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\n### Output:\nimport random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Markov chain given a text input.\n\n### Input:\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\n### Response:\nimport random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))<|end_of_text|>"
    },
    "49": {
        "instruction": "Write a Python program to determine if a number provided by the user is prime or not.",
        "input": "17",
        "output": "# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine if a number provided by the user is prime or not.\n\n### Input:\n17\n\n### Output:\n# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine if a number provided by the user is prime or not.\n\n### Input:\n17\n\n### Response:\n# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')<|end_of_text|>"
    },
    "50": {
        "instruction": "Write a Python program to calculate the difference between the lowest and highest value for an array of integers.",
        "input": "[12, 24, 3, 8, -1]",
        "output": "def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the difference between the lowest and highest value for an array of integers.\n\n### Input:\n[12, 24, 3, 8, -1]\n\n### Output:\ndef diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the difference between the lowest and highest value for an array of integers.\n\n### Input:\n[12, 24, 3, 8, -1]\n\n### Response:\ndef diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25<|end_of_text|>"
    },
    "51": {
        "instruction": "Rewrite the following code snippet to find prime numbers using Python.",
        "input": "Not applicable",
        "output": "def is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code snippet to find prime numbers using Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code snippet to find prime numbers using Python.\n\n### Input:\nNot applicable\n\n### Response:\ndef is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)<|end_of_text|>"
    },
    "52": {
        "instruction": "Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.",
        "input": "",
        "output": "d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.\n\n### Input:\n\n\n### Output:\nd = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.\n\n### Input:\n\n\n### Response:\nd = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)<|end_of_text|>"
    },
    "53": {
        "instruction": "Write a Python program to calculate the sum of all even numbers less than or equal to n.",
        "input": "",
        "output": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of all even numbers less than or equal to n.\n\n### Input:\n\n\n### Output:\ndef sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of all even numbers less than or equal to n.\n\n### Input:\n\n\n### Response:\ndef sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result<|end_of_text|>"
    },
    "54": {
        "instruction": "Create a Python script to calculate the Fibonacci numbers up to a given number.",
        "input": "",
        "output": "def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the Fibonacci numbers up to a given number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the Fibonacci numbers up to a given number.\n\n### Input:\n\n\n### Response:\ndef Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)<|end_of_text|>"
    },
    "55": {
        "instruction": "Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.",
        "input": "[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5%",
        "output": "items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.\n\n### Input:\n[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5%\n\n### Output:\nitems = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.\n\n### Input:\n[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5%\n\n### Response:\nitems = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)<|end_of_text|>"
    },
    "56": {
        "instruction": "In Python, create a function to find the maximum value within a nested dictionary.",
        "input": "sample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}",
        "output": "def findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function to find the maximum value within a nested dictionary.\n\n### Input:\nsample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}\n\n### Output:\ndef findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function to find the maximum value within a nested dictionary.\n\n### Input:\nsample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}\n\n### Response:\ndef findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))<|end_of_text|>"
    },
    "57": {
        "instruction": "Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.",
        "input": "",
        "output": "from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.\n\n### Input:\n\n\n### Output:\nfrom datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.\n\n### Input:\n\n\n### Response:\nfrom datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00<|end_of_text|>"
    },
    "58": {
        "instruction": "Generate a Python program to perform matrix multiplication on two given matrices.",
        "input": "",
        "output": "def matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication on two given matrices.\n\n### Input:\n\n\n### Output:\ndef matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication on two given matrices.\n\n### Input:\n\n\n### Response:\ndef matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result<|end_of_text|>"
    },
    "59": {
        "instruction": "Write a Python script to read an array from the user and then determine the mean and median of the array.",
        "input": "arr = [10, 15, 20, 25, 30, 35]",
        "output": "def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to read an array from the user and then determine the mean and median of the array.\n\n### Input:\narr = [10, 15, 20, 25, 30, 35]\n\n### Output:\ndef mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to read an array from the user and then determine the mean and median of the array.\n\n### Input:\narr = [10, 15, 20, 25, 30, 35]\n\n### Response:\ndef mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)<|end_of_text|>"
    },
    "60": {
        "instruction": "Create an algorithm in Python to check whether an array has even or odd number of elements.",
        "input": "[1, 2, 3, 4]",
        "output": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check whether an array has even or odd number of elements.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to check whether an array has even or odd number of elements.\n\n### Input:\n[1, 2, 3, 4]\n\n### Response:\ndef is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False<|end_of_text|>"
    },
    "61": {
        "instruction": "Implement a Python function to calculate the Gini coefficient of a given dataset.",
        "input": "[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]",
        "output": "def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to calculate the Gini coefficient of a given dataset.\n\n### Input:\n[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]\n\n### Output:\ndef gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to calculate the Gini coefficient of a given dataset.\n\n### Input:\n[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]\n\n### Response:\ndef gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605<|end_of_text|>"
    },
    "62": {
        "instruction": "Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.",
        "input": "Not applicable",
        "output": "import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.\n\n### Input:\nNot applicable\n\n### Response:\nimport tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))<|end_of_text|>"
    },
    "63": {
        "instruction": "Write a function to generate a prime number sequence using Python.",
        "input": "",
        "output": "def generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to generate a prime number sequence using Python.\n\n### Input:\n\n\n### Output:\ndef generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to generate a prime number sequence using Python.\n\n### Input:\n\n\n### Response:\ndef generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)<|end_of_text|>"
    },
    "64": {
        "instruction": "Write a Python program that removes duplicates from a list.",
        "input": "Input List: [1, 2, 3, 4, 3, 2, 1]",
        "output": "def remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that removes duplicates from a list.\n\n### Input:\nInput List: [1, 2, 3, 4, 3, 2, 1]\n\n### Output:\ndef remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that removes duplicates from a list.\n\n### Input:\nInput List: [1, 2, 3, 4, 3, 2, 1]\n\n### Response:\ndef remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]<|end_of_text|>"
    },
    "65": {
        "instruction": "Generate a Python script to sort the given list of words.",
        "input": "['bubble', 'selection', 'quicksort', 'insertion']",
        "output": "# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to sort the given list of words.\n\n### Input:\n['bubble', 'selection', 'quicksort', 'insertion']\n\n### Output:\n# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to sort the given list of words.\n\n### Input:\n['bubble', 'selection', 'quicksort', 'insertion']\n\n### Response:\n# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']<|end_of_text|>"
    },
    "66": {
        "instruction": "Generate a function for calculating the average of a list of numbers in Python.",
        "input": "Not applicable",
        "output": "def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function for calculating the average of a list of numbers in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function for calculating the average of a list of numbers in Python.\n\n### Input:\nNot applicable\n\n### Response:\ndef avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg<|end_of_text|>"
    },
    "67": {
        "instruction": "Generate a Python program that compares two binary trees to check if they are similar.",
        "input": "",
        "output": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that compares two binary trees to check if they are similar.\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that compares two binary trees to check if they are similar.\n\n### Input:\n\n\n### Response:\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)<|end_of_text|>"
    },
    "68": {
        "instruction": "Create a program for solving a quadratic equation in Python.",
        "input": "Equation: x2 + 3x - 4 = 0",
        "output": "import math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program for solving a quadratic equation in Python.\n\n### Input:\nEquation: x2 + 3x - 4 = 0\n\n### Output:\nimport math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program for solving a quadratic equation in Python.\n\n### Input:\nEquation: x2 + 3x - 4 = 0\n\n### Response:\nimport math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}<|end_of_text|>"
    },
    "69": {
        "instruction": "Construct a Python code for adding two matrices.",
        "input": "",
        "output": "def add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python code for adding two matrices.\n\n### Input:\n\n\n### Output:\ndef add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python code for adding two matrices.\n\n### Input:\n\n\n### Response:\ndef add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result<|end_of_text|>"
    },
    "70": {
        "instruction": "Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.",
        "input": "",
        "output": "def substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.\n\n### Input:\n\n\n### Output:\ndef substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.\n\n### Input:\n\n\n### Response:\ndef substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))<|end_of_text|>"
    },
    "71": {
        "instruction": "Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.",
        "input": "arr = [2, 5, 9, 15], x = 5",
        "output": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function which takes an array and a value and returns the index at which this value is present in the array.\n\n### Input:\narr = [2, 5, 9, 15], x = 5\n\n### Output:\ndef find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function which takes an array and a value and returns the index at which this value is present in the array.\n\n### Input:\narr = [2, 5, 9, 15], x = 5\n\n### Response:\ndef find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))<|end_of_text|>"
    },
    "72": {
        "instruction": "Develop a Python program to find the common elements in two lists.",
        "input": "List 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]",
        "output": "common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the common elements in two lists.\n\n### Input:\nList 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]\n\n### Output:\ncommon_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the common elements in two lists.\n\n### Input:\nList 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31]\n\n### Response:\ncommon_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]<|end_of_text|>"
    },
    "73": {
        "instruction": "Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.",
        "input": "s1 = \"abcd\", s2 = \"bae\"",
        "output": "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.\n\n### Input:\ns1 = \"abcd\", s2 = \"bae\"\n\n### Output:\ndef num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.\n\n### Input:\ns1 = \"abcd\", s2 = \"bae\"\n\n### Response:\ndef num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)<|end_of_text|>"
    },
    "74": {
        "instruction": "Generate a Python program to convert a string to its lowercase version.",
        "input": "",
        "output": "def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert a string to its lowercase version.\n\n### Input:\n\n\n### Output:\ndef str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert a string to its lowercase version.\n\n### Input:\n\n\n### Response:\ndef str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string<|end_of_text|>"
    },
    "75": {
        "instruction": "Can you generate a function in Python that shuffles a given list?",
        "input": "",
        "output": "import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate a function in Python that shuffles a given list?\n\n### Input:\n\n\n### Output:\nimport random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate a function in Python that shuffles a given list?\n\n### Input:\n\n\n### Response:\nimport random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list<|end_of_text|>"
    },
    "76": {
        "instruction": "Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.",
        "input": "mail_list = [\"example.user@gmail.com\", \"bad@example\"]",
        "output": "def validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.\n\n### Input:\nmail_list = [\"example.user@gmail.com\", \"bad@example\"]\n\n### Output:\ndef validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.\n\n### Input:\nmail_list = [\"example.user@gmail.com\", \"bad@example\"]\n\n### Response:\ndef validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True<|end_of_text|>"
    },
    "77": {
        "instruction": "Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.",
        "input": "int1 = 10\nint2 = 5",
        "output": "int1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.\n\n### Input:\nint1 = 10\nint2 = 5\n\n### Output:\nint1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.\n\n### Input:\nint1 = 10\nint2 = 5\n\n### Response:\nint1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)<|end_of_text|>"
    },
    "78": {
        "instruction": "Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.\n\n### Input:\nNot applicable\n\n### Response:\nimport numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)<|end_of_text|>"
    },
    "79": {
        "instruction": "Write a python program to clean up a list of emails and put them into a new list.",
        "input": "The original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']",
        "output": "original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to clean up a list of emails and put them into a new list.\n\n### Input:\nThe original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\n### Output:\noriginal_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to clean up a list of emails and put them into a new list.\n\n### Input:\nThe original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\n### Response:\noriginal_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']<|end_of_text|>"
    },
    "80": {
        "instruction": "Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.",
        "input": "Not applicable",
        "output": "from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.\n\n### Input:\nNot applicable\n\n### Output:\nfrom faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.\n\n### Input:\nNot applicable\n\n### Response:\nfrom faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))<|end_of_text|>"
    },
    "81": {
        "instruction": "Create a Python algorithm to classify positive and negative sentiment in tweets.",
        "input": "",
        "output": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to classify positive and negative sentiment in tweets.\n\n### Input:\n\n\n### Output:\ndef sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to classify positive and negative sentiment in tweets.\n\n### Input:\n\n\n### Response:\ndef sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results<|end_of_text|>"
    },
    "82": {
        "instruction": "Parse the given URL and print out the protocol, domain name, and path using Python.",
        "input": "https://www.example.com/path/to/file",
        "output": "import urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: /path/to/file",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the given URL and print out the protocol, domain name, and path using Python.\n\n### Input:\nhttps://www.example.com/path/to/file\n\n### Output:\nimport urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: /path/to/file",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the given URL and print out the protocol, domain name, and path using Python.\n\n### Input:\nhttps://www.example.com/path/to/file\n\n### Response:\nimport urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: /path/to/file<|end_of_text|>"
    },
    "83": {
        "instruction": "Write a recursive Python function to generate Fibonacci numbers.",
        "input": "",
        "output": "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive Python function to generate Fibonacci numbers.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive Python function to generate Fibonacci numbers.\n\n### Input:\n\n\n### Response:\ndef fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))<|end_of_text|>"
    },
    "84": {
        "instruction": "Create a Kubernetes pod setup that publishes a tweet every 5 minutes.",
        "input": "Not applicable",
        "output": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: /crontab/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Kubernetes pod setup that publishes a tweet every 5 minutes.\n\n### Input:\nNot applicable\n\n### Output:\napiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: /crontab/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Kubernetes pod setup that publishes a tweet every 5 minutes.\n\n### Input:\nNot applicable\n\n### Response:\napiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: /crontab/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"<|end_of_text|>"
    },
    "85": {
        "instruction": "Write a code to generate a two-dimensional array with zeros shapes in Python",
        "input": "Row = 3, Column = 3",
        "output": "\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\n### Input:\nRow = 3, Column = 3\n\n### Output:\n\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\n### Input:\nRow = 3, Column = 3\n\n### Response:\n\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]<|end_of_text|>"
    },
    "86": {
        "instruction": "Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.",
        "input": "numbers = [1, 2, 3, 4, 5]",
        "output": "numbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\n\n### Output:\nnumbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\n\n### Response:\nnumbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)<|end_of_text|>"
    },
    "87": {
        "instruction": "Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".",
        "input": "Not applicable",
        "output": "for i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".\n\n### Input:\nNot applicable\n\n### Response:\nfor i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)<|end_of_text|>"
    },
    "88": {
        "instruction": "Create a Python program to calculate the square root of a user-defined positive number.",
        "input": "n = 100",
        "output": "import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the square root of a user-defined positive number.\n\n### Input:\nn = 100\n\n### Output:\nimport math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the square root of a user-defined positive number.\n\n### Input:\nn = 100\n\n### Response:\nimport math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')<|end_of_text|>"
    },
    "89": {
        "instruction": "Create a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.",
        "input": "",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Rectangle to represent a two-dimensional rectangle with a length and width.\n\n### Input:\n\n\n### Response:\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width<|end_of_text|>"
    },
    "90": {
        "instruction": "Create a data visualization dashboard in Python using Matplotlib.",
        "input": "",
        "output": "import matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data visualization dashboard in Python using Matplotlib.\n\n### Input:\n\n\n### Output:\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data visualization dashboard in Python using Matplotlib.\n\n### Input:\n\n\n### Response:\nimport matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()<|end_of_text|>"
    },
    "91": {
        "instruction": "Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.",
        "input": "",
        "output": "# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.\n\n### Input:\n\n\n### Output:\n# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.\n\n### Input:\n\n\n### Response:\n# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)<|end_of_text|>"
    },
    "92": {
        "instruction": "Create a Python algorithm to identify the longest word in a sentence.",
        "input": "\u201cThe rain in Spain stays mainly in the plain.\u201d",
        "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to identify the longest word in a sentence.\n\n### Input:\n\u201cThe rain in Spain stays mainly in the plain.\u201d\n\n### Output:\ndef find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to identify the longest word in a sentence.\n\n### Input:\n\u201cThe rain in Spain stays mainly in the plain.\u201d\n\n### Response:\ndef find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str<|end_of_text|>"
    },
    "93": {
        "instruction": "Write a Python script that can convert degrees Fahrenheit to degrees Celsius.",
        "input": "",
        "output": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that can convert degrees Fahrenheit to degrees Celsius.\n\n### Input:\n\n\n### Output:\ndef FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that can convert degrees Fahrenheit to degrees Celsius.\n\n### Input:\n\n\n### Response:\ndef FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius<|end_of_text|>"
    },
    "94": {
        "instruction": "Generate a Python function that checks if a given number is an Armstrong number.",
        "input": "",
        "output": "def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that checks if a given number is an Armstrong number.\n\n### Input:\n\n\n### Output:\ndef is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that checks if a given number is an Armstrong number.\n\n### Input:\n\n\n### Response:\ndef is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False<|end_of_text|>"
    },
    "95": {
        "instruction": "Write a code in Python to print the following pattern:",
        "input": "",
        "output": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to print the following pattern:\n\n### Input:\n\n\n### Output:\nfor i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to print the following pattern:\n\n### Input:\n\n\n### Response:\nfor i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")<|end_of_text|>"
    },
    "96": {
        "instruction": "Program a web scraper in Python to extract the latest stock prices from specific websites.",
        "input": "[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https://finance.yahoo.com/quote/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a web scraper in Python to extract the latest stock prices from specific websites.\n\n### Input:\n[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https://finance.yahoo.com/quote/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a web scraper in Python to extract the latest stock prices from specific websites.\n\n### Input:\n[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n### Response:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https://finance.yahoo.com/quote/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')<|end_of_text|>"
    },
    "97": {
        "instruction": "The code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`), `label_dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`), and `name` (a name for the operation, optional). The function returns a tuple of `Tensor` objects `(label, feature_indices, feature_values, feature_shape)`, where `label` is a `Tensor` of type `label_dtype`, `feature_indices` is a `Tensor` of type `int64`, `feature_values` is a `Tensor` of type `dtype`, and `feature_shape` is a `Tensor` of type `int64`.",
        "input": "",
        "output": "\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n    label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n    _, _, _op = _op_def_lib._apply_op_helper(\n        \"DecodeLibsvm\", input=input, num_features=num_features, dtype=dtype,\n        label_dtype=label_dtype, name=name)\n    _result = _op.outputs[:]\n    _inputs_flat = _op.inputs\n    _attrs = (\"dtype\", _op.get_attr(\"dtype\"), \"label_dtype\",\n              _op.get_attr(\"label_dtype\"), \"num_features\",\n              _op.get_attr(\"num_features\"))\n    _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n    _result = _DecodeLibsvmOutput._make(_result)\n    return _result\n\n  else:\n    try:\n      _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n        _ctx._context_handle, _ctx._eager_context.device_name, \"DecodeLibsvm\",\n        name, _ctx._post_execution_callbacks, input, \"dtype\", dtype,\n        \"label_dtype\", label_dtype, \"num_features\", num_features)\n      _result = _DecodeLibsvmOutput._make(_result)\n      return _result\n    except _core._FallbackException:\n      return decode_libsvm_eager_fallback(\n          input, dtype=dtype, label_dtype=label_dtype,\n          num_features=num_features, name=name, ctx=_ctx)\n    except _core._NotOkStatusException as e:\n      if name is not None:\n        message = e.message + \" name: \" + name\n      else:\n        message = e.message\n      _six.raise_from(_core._status_to_exception(e.code, message), None)\n\n\ndef decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None):\n  r\"\"\"This is the slowpath function for Eager mode.\n  This is for function decode_libsvm\n  \"\"\"\n  _ctx = ctx if ctx else _context.context()\n  num_features = _execute.make_int(num_features, \"num_features\")\n  if dtype is None:\n    dtype = _dtypes.float32\n  dtype = _execute.make_type(dtype, \"dtype\")\n  if label_dtype is None:\n    label_dtype = _dtypes.int64\n  label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n  input = _ops.convert_to_tensor(input, _dtypes.string)\n  _inputs_flat = [input]\n  _attrs = (\"dtype\", dtype, \"label_dtype\", label_dtype, \"num_features\",\n  num_features)\n  _result = _execute.execute(b\"DecodeLibsvm\", 4, inputs=_inputs_flat,\n                             attrs=_attrs, ctx=_ctx, name=name)\n  _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n  _result = _DecodeLibsvmOutput._make(_result)\n  return _result\n\n_ops.RegisterShape(\"DecodeLibsvm\")(None)\n\ndef _InitOpDefLibrary(op_list_proto_bytes):\n  op_list = _op_def_pb2.OpList()\n  op_list.ParseFromString(op_list_proto_bytes)\n  _op_def_registry.register_op_list(op_list)\n  op_def_lib = _op_def_library.OpDefLibrary()\n  op_def_lib.add_op_list(op_list)\n  return op_def_lib\n# op {\n#   name: \"DecodeLibsvm\"\n#   input_arg {\n#     name: \"input\"\n#     type: DT_STRING\n#   }\n#   output_arg {\n#     name: \"label\"\n#     type_attr: \"label_dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_indices\"\n#     type: DT_INT64\n#   }\n#   output_arg {\n#     name: \"feature_values\"\n#     type_attr: \"dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_shape\"\n#     type: DT_INT64\n#   }\n#   attr {\n#     name: \"dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_FLOAT\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"label_dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_INT64\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"num_features\"\n#     type: \"int\"\n#     has_minimum: true\n#     minimum: 1\n#   }\n# }\n_op_def_lib = _InitOpDefLibrary(b\"\\n\\311\\001\\n\\014DecodeLibsvm\\022\\t\\n\\005input\\030\\007\\032\\024\\n\\005label\\\"\\013label_dtype\\032\\023\\n\\017feature_indices\\030\\t\\032\\027\\n\\016feature_values\\\"\\005dtype\\032\\021\\n\\rfeature_shape\\030\\t\\\"\\033\\n\\005dtype\\022\\004type\\032\\0020\\001:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"!\\n\\013label_dtype\\022\\004type\\032\\0020\\t:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"\\027\\n\\014num_features\\022\\003int(\\0010\\001\")\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`), `label_dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`), and `name` (a name for the operation, optional). The function returns a tuple of `Tensor` objects `(label, feature_indices, feature_values, feature_shape)`, where `label` is a `Tensor` of type `label_dtype`, `feature_indices` is a `Tensor` of type `int64`, `feature_values` is a `Tensor` of type `dtype`, and `feature_shape` is a `Tensor` of type `int64`.\n\n### Input:\n\n\n### Output:\n\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n    label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n    _, _, _op = _op_def_lib._apply_op_helper(\n        \"DecodeLibsvm\", input=input, num_features=num_features, dtype=dtype,\n        label_dtype=label_dtype, name=name)\n    _result = _op.outputs[:]\n    _inputs_flat = _op.inputs\n    _attrs = (\"dtype\", _op.get_attr(\"dtype\"), \"label_dtype\",\n              _op.get_attr(\"label_dtype\"), \"num_features\",\n              _op.get_attr(\"num_features\"))\n    _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n    _result = _DecodeLibsvmOutput._make(_result)\n    return _result\n\n  else:\n    try:\n      _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n        _ctx._context_handle, _ctx._eager_context.device_name, \"DecodeLibsvm\",\n        name, _ctx._post_execution_callbacks, input, \"dtype\", dtype,\n        \"label_dtype\", label_dtype, \"num_features\", num_features)\n      _result = _DecodeLibsvmOutput._make(_result)\n      return _result\n    except _core._FallbackException:\n      return decode_libsvm_eager_fallback(\n          input, dtype=dtype, label_dtype=label_dtype,\n          num_features=num_features, name=name, ctx=_ctx)\n    except _core._NotOkStatusException as e:\n      if name is not None:\n        message = e.message + \" name: \" + name\n      else:\n        message = e.message\n      _six.raise_from(_core._status_to_exception(e.code, message), None)\n\n\ndef decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None):\n  r\"\"\"This is the slowpath function for Eager mode.\n  This is for function decode_libsvm\n  \"\"\"\n  _ctx = ctx if ctx else _context.context()\n  num_features = _execute.make_int(num_features, \"num_features\")\n  if dtype is None:\n    dtype = _dtypes.float32\n  dtype = _execute.make_type(dtype, \"dtype\")\n  if label_dtype is None:\n    label_dtype = _dtypes.int64\n  label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n  input = _ops.convert_to_tensor(input, _dtypes.string)\n  _inputs_flat = [input]\n  _attrs = (\"dtype\", dtype, \"label_dtype\", label_dtype, \"num_features\",\n  num_features)\n  _result = _execute.execute(b\"DecodeLibsvm\", 4, inputs=_inputs_flat,\n                             attrs=_attrs, ctx=_ctx, name=name)\n  _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n  _result = _DecodeLibsvmOutput._make(_result)\n  return _result\n\n_ops.RegisterShape(\"DecodeLibsvm\")(None)\n\ndef _InitOpDefLibrary(op_list_proto_bytes):\n  op_list = _op_def_pb2.OpList()\n  op_list.ParseFromString(op_list_proto_bytes)\n  _op_def_registry.register_op_list(op_list)\n  op_def_lib = _op_def_library.OpDefLibrary()\n  op_def_lib.add_op_list(op_list)\n  return op_def_lib\n# op {\n#   name: \"DecodeLibsvm\"\n#   input_arg {\n#     name: \"input\"\n#     type: DT_STRING\n#   }\n#   output_arg {\n#     name: \"label\"\n#     type_attr: \"label_dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_indices\"\n#     type: DT_INT64\n#   }\n#   output_arg {\n#     name: \"feature_values\"\n#     type_attr: \"dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_shape\"\n#     type: DT_INT64\n#   }\n#   attr {\n#     name: \"dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_FLOAT\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"label_dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_INT64\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"num_features\"\n#     type: \"int\"\n#     has_minimum: true\n#     minimum: 1\n#   }\n# }\n_op_def_lib = _InitOpDefLibrary(b\"\\n\\311\\001\\n\\014DecodeLibsvm\\022\\t\\n\\005input\\030\\007\\032\\024\\n\\005label\\\"\\013label_dtype\\032\\023\\n\\017feature_indices\\030\\t\\032\\027\\n\\016feature_values\\\"\\005dtype\\032\\021\\n\\rfeature_shape\\030\\t\\\"\\033\\n\\005dtype\\022\\004type\\032\\0020\\001:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"!\\n\\013label_dtype\\022\\004type\\032\\0020\\t:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"\\027\\n\\014num_features\\022\\003int(\\0010\\001\")\n",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`), `label_dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`), and `name` (a name for the operation, optional). The function returns a tuple of `Tensor` objects `(label, feature_indices, feature_values, feature_shape)`, where `label` is a `Tensor` of type `label_dtype`, `feature_indices` is a `Tensor` of type `int64`, `feature_values` is a `Tensor` of type `dtype`, and `feature_shape` is a `Tensor` of type `int64`.\n\n### Input:\n\n\n### Response:\n\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n    label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n    _, _, _op = _op_def_lib._apply_op_helper(\n        \"DecodeLibsvm\", input=input, num_features=num_features, dtype=dtype,\n        label_dtype=label_dtype, name=name)\n    _result = _op.outputs[:]\n    _inputs_flat = _op.inputs\n    _attrs = (\"dtype\", _op.get_attr(\"dtype\"), \"label_dtype\",\n              _op.get_attr(\"label_dtype\"), \"num_features\",\n              _op.get_attr(\"num_features\"))\n    _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n    _result = _DecodeLibsvmOutput._make(_result)\n    return _result\n\n  else:\n    try:\n      _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n        _ctx._context_handle, _ctx._eager_context.device_name, \"DecodeLibsvm\",\n        name, _ctx._post_execution_callbacks, input, \"dtype\", dtype,\n        \"label_dtype\", label_dtype, \"num_features\", num_features)\n      _result = _DecodeLibsvmOutput._make(_result)\n      return _result\n    except _core._FallbackException:\n      return decode_libsvm_eager_fallback(\n          input, dtype=dtype, label_dtype=label_dtype,\n          num_features=num_features, name=name, ctx=_ctx)\n    except _core._NotOkStatusException as e:\n      if name is not None:\n        message = e.message + \" name: \" + name\n      else:\n        message = e.message\n      _six.raise_from(_core._status_to_exception(e.code, message), None)\n\n\ndef decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None):\n  r\"\"\"This is the slowpath function for Eager mode.\n  This is for function decode_libsvm\n  \"\"\"\n  _ctx = ctx if ctx else _context.context()\n  num_features = _execute.make_int(num_features, \"num_features\")\n  if dtype is None:\n    dtype = _dtypes.float32\n  dtype = _execute.make_type(dtype, \"dtype\")\n  if label_dtype is None:\n    label_dtype = _dtypes.int64\n  label_dtype = _execute.make_type(label_dtype, \"label_dtype\")\n  input = _ops.convert_to_tensor(input, _dtypes.string)\n  _inputs_flat = [input]\n  _attrs = (\"dtype\", dtype, \"label_dtype\", label_dtype, \"num_features\",\n  num_features)\n  _result = _execute.execute(b\"DecodeLibsvm\", 4, inputs=_inputs_flat,\n                             attrs=_attrs, ctx=_ctx, name=name)\n  _execute.record_gradient(\n      \"DecodeLibsvm\", _inputs_flat, _attrs, _result, name)\n  _result = _DecodeLibsvmOutput._make(_result)\n  return _result\n\n_ops.RegisterShape(\"DecodeLibsvm\")(None)\n\ndef _InitOpDefLibrary(op_list_proto_bytes):\n  op_list = _op_def_pb2.OpList()\n  op_list.ParseFromString(op_list_proto_bytes)\n  _op_def_registry.register_op_list(op_list)\n  op_def_lib = _op_def_library.OpDefLibrary()\n  op_def_lib.add_op_list(op_list)\n  return op_def_lib\n# op {\n#   name: \"DecodeLibsvm\"\n#   input_arg {\n#     name: \"input\"\n#     type: DT_STRING\n#   }\n#   output_arg {\n#     name: \"label\"\n#     type_attr: \"label_dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_indices\"\n#     type: DT_INT64\n#   }\n#   output_arg {\n#     name: \"feature_values\"\n#     type_attr: \"dtype\"\n#   }\n#   output_arg {\n#     name: \"feature_shape\"\n#     type: DT_INT64\n#   }\n#   attr {\n#     name: \"dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_FLOAT\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"label_dtype\"\n#     type: \"type\"\n#     default_value {\n#       type: DT_INT64\n#     }\n#     allowed_values {\n#       list {\n#         type: DT_FLOAT\n#         type: DT_DOUBLE\n#         type: DT_INT32\n#         type: DT_INT64\n#       }\n#     }\n#   }\n#   attr {\n#     name: \"num_features\"\n#     type: \"int\"\n#     has_minimum: true\n#     minimum: 1\n#   }\n# }\n_op_def_lib = _InitOpDefLibrary(b\"\\n\\311\\001\\n\\014DecodeLibsvm\\022\\t\\n\\005input\\030\\007\\032\\024\\n\\005label\\\"\\013label_dtype\\032\\023\\n\\017feature_indices\\030\\t\\032\\027\\n\\016feature_values\\\"\\005dtype\\032\\021\\n\\rfeature_shape\\030\\t\\\"\\033\\n\\005dtype\\022\\004type\\032\\0020\\001:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"!\\n\\013label_dtype\\022\\004type\\032\\0020\\t:\\010\\n\\0062\\004\\001\\002\\003\\t\\\"\\027\\n\\014num_features\\022\\003int(\\0010\\001\")\n<|end_of_text|>"
    },
    "98": {
        "instruction": "Write a Python program to compute the sum of the values of a given dictionary",
        "input": "dictionary = {'A':5, 'B':6, 'C':10}",
        "output": "def dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of the values of a given dictionary\n\n### Input:\ndictionary = {'A':5, 'B':6, 'C':10}\n\n### Output:\ndef dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of the values of a given dictionary\n\n### Input:\ndictionary = {'A':5, 'B':6, 'C':10}\n\n### Response:\ndef dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum<|end_of_text|>"
    },
    "99": {
        "instruction": "Create a REST API in Python that can be used to delete an item from a list.",
        "input": "Not applicable",
        "output": "from flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('/items/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python that can be used to delete an item from a list.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('/items/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})",
        "text": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API in Python that can be used to delete an item from a list.\n\n### Input:\nNot applicable\n\n### Response:\nfrom flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('/items/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})<|end_of_text|>"
    }
}