[
    "def sum_sequence(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\nnums = [1, 2, 3, 4, 5]\nresult = sum_sequence(nums)\nprint(result)",
    "import requests\nfrom bs4 import BeautifulSoup\n\ndef crawl_website(url):\n    response = requests.get(url)\n    html = response.text\n    soup = BeautifulSoup(html, 'html.parser')\n    phone_numbers = soup.find_all('span', attrs={'class': 'phone-number'})\n    return [phone_number.text for phone_number in phone_numbers]",
    "squares = [x**2 for x in [1, 2, 3, 5, 8, 13]]",
    "def remove_duplicates(s):\n    result = \"\"\n    prev = ''\n    for c in s:\n        if c!= prev:\n            result += c\n            prev = c\n    return result\n\nprint(remove_duplicates(\"AAABBCCCD\"))",
    "import random\n\ndef generate_random_divisible_by_3():\n    random_number = random.randint(0, 9)\n    while random_number % 3!= 0:\n        random_number = random.randint(0, 9)\n    return random_number\n\nif __name__ == '__main__':\n    print(generate_random_divisible_by_3())",
    "def get_third_largest(arr):\n    first = second = float('-inf')\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second:\n            second = num\n    return second\n\nprint(get_third_largest([12, 13, 13, 45, 22, 99]))",
    "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(name)\n\n# Connect to the database\nconn = sqlite3.connect('records.db')\ncursor = conn.cursor()\n\n# Create the API routes\n@app.route('/records', methods=['GET', 'POST'])\ndef records():\n if request.method == 'GET':\n # Get all records\n cursor.execute('SELECT * FROM records')\n rows = cursor.fetchall()\n return jsonify(rows)\n\n elif request.method == 'POST':\n # Create a new record\n data = request.get_json()\n cursor.execute('INSERT INTO records VALUES (?,?)', (data['name'], data['value']))\n conn.commit()\n return jsonify({'message': 'Record created successfully'})\n\n@app.route('/records/<name>', methods=['GET', 'PUT', 'DELETE'])\ndef record(name):\n if request.method == 'GET':\n # Get a single record\n cursor.execute('SELECT * FROM records WHERE name=?', (name,))\n row = cursor.fetchone()\n return jsonify(row)\n\n elif request.method == 'PUT':\n # Update a record\n data = request.get_json()\n cursor.execute('UPDATE records SET value=? WHERE name=?', (data['value'], name))\n conn.commit()\n return jsonify({'message': 'Record updated successfully'})\n\n elif request.method == 'DELETE':\n # Delete a record\n cursor.execute('DELETE FROM records WHERE name=?', (name,))\n conn.commit()\n return jsonify({'message': 'Record deleted successfully'})\n\nif name =='main':\n app.run(debug=True)",
    "def contains_all_words(string, words):\n    words_in_string = string.split(' ')\n    for word in words:\n        if word not in words_in_string:\n            return False\n    return True\n\nstring = 'This is a test'\nwords = ['test', 'this', 'is']\nprint(contains_all_words(string, words))",
    "def is_palindrome(s):\n    '''This function checks if a given string is a palindrome. It returns True if the string is a palindrome, and False otherwise.'''\n    s = s.lower()\n    return s == s[::-1]",
    "def sort_and_print(arr):\n    arr.sort()\n    for i in arr:\n        print(i)\n\narr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\nsort_and_print(arr)",
    "def double_add(x, y):\n    result = x + y\n    result = result * 2\n    return result",
    "sentence = \"This machine learning project is challenging.\"\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nwords = sentence.split()\nnon_vowel_words = [word for word in words if word[0].lower() not in vowels]\nprint(non_vowel_words) # ['This','machine', 'learning', 'project', 'is', 'challenging']",
    "def average_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum / len(lst)\n\nprint(average_list([1, 5, 6, 7, 8]))",
    "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n >= 1",
    "def decide_winner(user_choice, computer_choice):\n    # Rock beats Scissors\n    if user_choice == 'rock' and computer_choice =='scissors':\n        return 'user'\n    # Scissors beats Paper\n    elif user_choice =='scissors' and computer_choice == 'paper':\n        return 'user'\n    # Paper beats Rock\n    elif user_choice == 'paper' and computer_choice == 'rock':\n        return 'user'\n    # Computer wins\n    elif computer_choice == 'rock' and user_choice =='scissors':\n        return 'computer'\n    elif computer_choice =='scissors' and user_choice == 'paper':\n        return 'computer'\n    elif computer_choice == 'paper' and user_choice == 'rock':\n        return 'computer'\n    # Tie\n    else:\n        return 'tie'",
    "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten\n\n# Load the dataset\nimages = np.load('images.npy')\nlabels = np.load('labels.npy')\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))",
    "def find_divisible_numbers(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers\n\ndivisible_numbers = find_divisible_numbers(36, 74, 6)\nprint(divisible_numbers)",
    "def contains(query, word):\n    if word in query:\n        return True\n    else:\n        return False",
    "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The factorial of\", num, \"is\", factorial(num))",
    "import numpy as np\nfrom sklearn import linear_model\n\ndef predict_class_labels(X):\n    model = linear_model.LogisticRegression()\n    model.fit(X[:, 0:3], X[:, 3])\n    return model.predict(X[:, 0:3])",
    "import string\nimport random\n\ndef generate_password():\n chars = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(chars) for _ in range(8))\n return password\n\nprint(generate_password())",
    "def generate_list():\n    num_list = []\n    num = 0\n    while num < 10:\n        num_list.append(num)\n        num += 1\n    return num_list\n\nprint(generate_list())",
    "import tweepy\n\nconsumer_key = '<YOUR_CONSUMER_KEY>'\nconsumer_secret = '<YOUR_CONSUMER_SECRET>'\naccess_token = '<YOUR_ACCESS_TOKEN>'\naccess_token_secret = '<YOUR_ACCESS_TOKEN_SECRET>'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\nusername = \"@elonmusk\"\n\ntweets = api.user_timeline(screen_name=username, count=200, include_rts=False, tweet_mode=\"extended\")\n\nfor tweet in tweets:\n print(tweet.full_text)",
    "import numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\n# Create a dataset\ndata = [10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]\ndata = np.array(data).reshape(-1, 1)\n\n# Create the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(64, activation='relu', input_shape=[1]))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n\n# Train the model\nmodel.fit(data, epochs=100, batch_size=32, validation_split=0.2)\n\n# Make a prediction\nprediction = model.predict(data)\n\n# Print the prediction\nprint('The stock price for the next day is: ', prediction[-1][0])",
    "def encrypt(message, key):\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        encrypted_message += chr(ord(message[i]) + ord(key[i % len(key)]))\n    return encrypted_message\n\nmessage = \"Hello world!\"\nkey = \"secret\"\n\nencrypted_message = encrypt(message, key)\nprint(encrypted_message)",
    "def print_larger(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n        print(parameter_2)\n\nprint_larger(parameter_1, parameter_2)",
    "even_numbers = [i for i in range(1,21) if i % 2 == 0]",
    "def fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end = \" \")\n\nn = 10\nfibonacci_series(n)",
    "def solve(board):\n    # Find the first empty cell\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                # Try each possible number in the cell\n                for num in range(1, 10):\n                    # Check if the number is valid\n                    if is_valid(board, i, j, num):\n                        # If valid, place the number in the cell\n                        board[i][j] = num\n                        # Recursively call solve()\n                        if solve(board):\n                                    # If solve() returns true, return true\n                                    return True\n                        # If solve() returns false, remove the number\n                        # from the cell\n                        board[i][j] = 0\n                # If no valid number was found, return false\n                return False\n    # If no empty cell was found, return true\n    return True",
    "def sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum",
    "people = {\n    \"John\": 20,\n    \"Jane\": 40,\n    \"Alex\": 18,\n    \"Peter\": 45\n}",
    "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num))",
    "import random\n\nrandom_number = random.randint(100000, 999999)\nprint(random_number)",
    "def sort_by_length(strings):\n    return sorted(strings, key=len)\n\nstrings = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nprint(sort_by_length(strings)) # Output: ['cat', 'dog', 'apple', 'banana']",
    "def get_max_min(list):\n    max_val = max(list)\n    min_val = min(list)\n    return max_val, min_val",
    "for num in my_list:\n    if num % 2 == 0:\n        print(num)",
    "arr = [float(i) for i in range(11)]",
    "import tensorflow as tf\n\n# Load the MNIST dataset\nmnist = tf.keras.datasets.mnist\n\n# Split the data into train and test sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Normalize the data\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)",
    "from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Create a Multinomial Naive Bayes classifier\nclf = MultinomialNB()\n\n# Create a Count Vectorizer\nvectorizer = CountVectorizer()\n\n# Train the classifier\nclf.fit(vectorizer.fit_transform(inputs), labels)\n\n# Make predictions\npredictions = clf.predict(vectorizer.transform(user_input))",
    "def sort_lists(A, B):\n result = []\n while len(A) > 0 and len(B) > 0:\n if A[0] > B[0]:\n result.append(A[0])\n A = A[1:]\n else:\n result.append(B[0])\n B = B[1:]\n if len(A) == 0:\n result += B\n elif len(B) == 0:\n result += A\n return result",
    "def longest_common_subsequence(string1, string2):\n    n1 = len(string1)\n    n2 = len(string2)\n    dp = [[0 for _ in range(n2+1)] for _ in range(n1+1)]\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n1][n2]",
    "public static int Power(int x, int y) {\n    if (y == 0) {\n        return 1;\n    } else {\n        return x * Power(x, y - 1);\n    }\n}",
    "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)",
    "# This program will play the game of Tic-Tac-Toe\n\n# Create a board\nboard = [\"_\", \"_\", \"_\",\n         \"_\", \"_\", \"_\",\n         \"_\", \"_\", \"_\"]\n\n# Create a dictionary to keep track of the players\nplayer1 = {\"name\": \"\", \"mark\": \"X\"}\nplayer2 = {\"name\": \"\", \"mark\": \"O\"}\n\n# Function to print the board\ndef print_board(board):\n    print(board[0] + \"|\" + board[1] + \"|\" + board[2])\n    print(board[3] + \"|\" + board[4] + \"|\" + board[5])\n    print(board[6] + \"|\" + board[7] + \"|\" + board[8])\n\n# Function to check if the game is won\ndef check_win(board, mark):\n    return ((board[0] == mark and board[1] == mark and board[2] == mark) or\n            (board[3] == mark and board[4] == mark and board[5] == mark) or\n            (board[6] == mark and board[7] == mark and board[8] == mark) or\n            (board[0] == mark and board[3] == mark and board[6] == mark) or\n            (board[1] == mark and board[4] == mark and board[7] == mark) or\n            (board[2] == mark and board[5] == mark and board[8] == mark) or\n            (board[0] == mark and board[4] == mark and board[8] == mark) or\n            (board[2] == mark and board[4] == mark and board[6] == mark))\n\n# Function to check if the board is full\ndef check_full(board):\n    for i in range(9):\n        if board[i] == \"_\":\n            return False\n    return True\n\n# Main game loop\nwhile True:\n    print_board(board)\n    # Player 1 turn\n    print(\"Player 1's turn\")\n    move = int(input(\"Enter your move (1-9): \"))\n    if board[move-1] == \"_\":\n        board[move-1] = player1[\"mark\"]\n    else:\n        print(\"This space is already taken\")\n        continue\n    # Check if the game is won\n    if check_win(board, player1[\"mark\"]):\n        print(\"Player 1 has won!\")\n        break\n    # Check if the board is full\n    if check_full(board):\n        print(\"The game is a draw!\")\n        break\n    # Player 2 turn\n    print(\"Player 2's turn\")\n    move = int(input(\"Enter your move (1-9): \"))\n    if board[move-1] == \"_\":\n        board[move-1] = player2[\"mark\"]\n    else:\n        print(\"This space is already taken\")\n        continue\n    # Check if the game is won\n    if check_win(board, player2[\"mark\"]):\n        print(\"Player 2 has won!\")\n        break\n    # Check if the board is full\n    if check_full(board):\n        print(\"The game is a draw!\")\n        break",
    "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)",
    "def is_equal(x, y):\n    if x == y:\n        return True\n    else:\n        return False\n\nfirst_int = 10\nsecond_int = 10\n\nprint(is_equal(first_int, second_int))",
    "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Create a sentiment analyzer\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Input text\ntext = \"This is a great movie!\"\n\n# Get sentiment scores\nscores = sentiment_analyzer.polarity_scores(text)\n\n# Categorize sentiment\nif scores['compound'] >= 0.05:\n sentiment = 'positive'\nelif scores['compound'] <= -0.05:\n sentiment = 'negative'\nelse:\n sentiment = 'neutral'\n\n# Print sentiment\nprint(f'The sentiment of the text is {sentiment}.')",
    "# Get five numbers from the user\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\nnum3 = float(input(\"Enter the third number: \"))\nnum4 = float(input(\"Enter the fourth number: \"))\nnum5 = float(input(\"Enter the fifth number: \"))\n\n# Calculate the average\naverage = (num1 + num2 + num3 + num4 + num5) / 5\n\n# Print the average\nprint(\"The average of the five numbers is:\", average)",
    "import re\n\ndef generate_markov_chain(text):\n    words = re.findall(r'\\w+', text.lower())\n    words_dict = {}\n    for i in range(len(words)-1):\n        if words[i] in words_dict:\n            words_dict[words[i]].append(words[i+1])\n        else:\n            words_dict[words[i]] = [words[i+1]]\n    return words_dict\n\nmarkov_chain = generate_markov_chain(text)\nprint(markov_chain)",
    "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\n\nif is_prime(num):\n    print(\"The number is prime\")\nelse:\n    print(\"The number is not prime\")",
    "def diff(arr):\n  return max(arr) - min(arr)\n\narr = [12, 24, 3, 8, -1]\nprint(diff(arr))",
    "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nfor n in range(1, 11):\n    if is_prime(n):\n        print(n, \"is a prime number\")",
    "my_dict = {key: key**2 for key in range(1, 16)}",
    "def sum_even_numbers(n):\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i\n    return result",
    "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(fibonacci(9))",
    "def calculate_total(items, shipping_cost, tax_rate):\n total = 0\n for item in items:\n total += item['price'] * item['quantity']\n total += shipping_cost\n total *= (1 + tax_rate/100)\n return total\n\nitems = [\n {'name': 'widget', 'price': 10, 'quantity': 5},\n {'name': 'thingy', 'price': 7, 'quantity': 3},\n {'name': 'doodad', 'price': 5, 'quantity': 2},\n]\n\nshipping_cost = 7.50\ntax_rate = 9.5\n\ntotal = calculate_total(items, shipping_cost, tax_rate)\nprint(total)",
    "def find_max_value(dictionary):\n    max_value = 0\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            max_value = max(max_value, find_max_value(value))\n        else:\n            max_value = max(max_value, value)\n    return max_value\n\nif __name__ == '__main__':\n    sample_dict = {\n        \"key1\": {\n            \"value1\": 10,\n            \"value2\": 20\n        },\n        \"key2\": {\n            \"value3\": 40\n        },\n    }\n    print(find_max_value(sample_dict))",
    "from datetime import datetime\n\ndef get_time_date():\n    return datetime(year=2021, month=3, day=7, hour=17, minute=30, second=0, weekday=6)",
    "def matrix_multiply(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n    \n    if cols_A!= rows_B:\n        return False\n    \n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n    \n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n    return C",
    "def mean_median(arr):\n    mean = sum(arr) / len(arr)\n    arr.sort()\n    if len(arr) % 2 == 0:\n        median = (arr[int(len(arr)/2)] + arr[int(len(arr)/2 - 1)]) / 2\n    else:\n        median = arr[int(len(arr)/2)]\n    return mean, median\n\narr = [10, 15, 20, 25, 30, 35]\nmean, median = mean_median(arr)\nprint(\"Mean:\", mean)\nprint(\"Median:\", median)",
    "def is_even(arr):\n    if len(arr) % 2 == 0:\n        return True\n    else:\n        return False\n\narr = [1, 2, 3, 4]\nresult = is_even(arr)\nprint(result)",
    "def gini(data):\n    data = sorted(data)\n    n = len(data)\n    gini_coefficient = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            gini_coefficient += 1/2*(data[j] - data[i])\n    return gini_coefficient/(n*n-1)\n\ndata = [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]\nprint(gini(data))",
    "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation\n\n# Load the data\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Reshape the data\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\n# Normalize the data\nx_train /= 255\nx_test /= 255\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(784,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, batch_size=128, epochs=10, verbose=1, validation_data=(x_test, y_test))\n\n# Evaluate the model\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])",
    "def generate_prime_number_sequence(n):\n    prime_numbers = []\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            prime_numbers.append(num)\n    return prime_numbers",
    "def remove_duplicates(lst):\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    return new_lst\n\nprint(remove_duplicates([1, 2, 3, 4, 3, 2, 1]))",
    "def sort_words(words):\n    words.sort()\n    return words\n\nwords = ['bubble','selection', 'quicksort', 'insertion']\nprint(sort_words(words))",
    "def calculate_average(numbers):\n total = 0\n for number in numbers:\n total += number\n return total / len(numbers)",
    "def is_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    elif root1 is not None and root2 is not None:\n        if root1.val == root2.val:\n            return is_similar(root1.left, root2.left) and is_similar(root1.right, root2.right)\n    return False",
    "import math\n\n# coefficients of the quadratic equation\na = 1\nb = 3\nc = -4\n\n# calculate the discriminant\nd = (b**2) - (4*a*c)\n\n# find the two solutions\nsol1 = (-b-math.sqrt(d))/(2*a)\nsol2 = (-b+math.sqrt(d))/(2*a)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2))",
    "def add_matrix(m1, m2):\n    result = [[0 for x in range(len(m1[0]))] for y in range(len(m1))]\n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n    return result",
    "def print_substrings(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            print(string[i:j])\n\nprint_substrings(\"Hello\")",
    "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [2, 5, 9, 15]\nx = 5\n\nindex = find_index(arr, x)\nprint(index) # 1",
    "list_1 = [3, 9, 15, 21, 27]\nlist_2 = [21, 7, 13, 29, 31]\n\ncommon_elements = []\n\nfor element_1 in list_1:\n    for element_2 in list_2:\n        if element_1 == element_2:\n            common_elements.append(element_1)\n\nprint(common_elements)",
    "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\ns1 = \"abcd\"\ns2 = \"bae\"\nprint(num_common_substrings(s1, s2))",
    "def convert_to_lowercase(string):\n    return string.lower()",
    "import random\n\ndef shuffle_list(list):\n    random.shuffle(list)\n    return list",
    "def validate_emails(mail_list):\n    valid_emails = []\n    for email in mail_list:\n        if re.match(r'^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$', email):\n            valid_emails.append(email)\n    return len(valid_emails) == len(mail_list)",
    "int1 = 10\nint2 = 5\n\n# Addition\nresult_add = int1 + int2\nprint(\"Addition:\", result_add)\n\n# Subtraction\nresult_sub = int1 - int2\nprint(\"Subtraction:\", result_sub)\n\n# Multiplication\nresult_mul = int1 * int2\nprint(\"Multiplication:\", result_mul)\n\n# Division\nresult_div = int1 / int2\nprint(\"Division:\", result_div)\n\n# Modulo\nresult_mod = int1 % int2\nprint(\"Modulo:\", result_mod)",
    "import nltk\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load data\nreviews = pd.read_csv('reviews.csv')\n\n# Preprocess data\nnltk.download('punkt')\ntokenizer = nltk.tokenize.WordPunctTokenizer()\n\ndef tokenize(text):\n tokens = tokenizer.tokenize(text)\n return [token.lower() for token in tokens if len(token) > 3]\n\nvectorizer = TfidfVectorizer(tokenizer=tokenize)\nX = vectorizer.fit_transform(reviews.review)\n\n# Train the model\ny = reviews.sentiment\nclf = MultinomialNB().fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\n\n# Print results\nfor review, prediction in zip(reviews.review, predictions):\n print(f'{review} - {prediction}')",
    "def clean_emails(email_list):\n    cleaned_list = []\n    for email in email_list:\n        email = email.lower()\n        email = email.replace('+', '')\n        email = email.replace('.uk', '')\n        cleaned_list.append(email)\n    return cleaned_list\n\nif __name__ == '__main__':\n    email_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n    print(clean_emails(email_list))",
    "import faker\nfake = faker.Faker()\n\nfor _ in range(10):\n name = fake.name()\n email = fake.email()\n age = fake.random_int(min=18, max=70)\n print(name, email, age)",
    "import nltk\nimport sklearn\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Preprocess the tweets\ndef preprocess_tweets(tweets):\n    # Tokenize the tweets\n    tokens = [nltk.word_tokenize(tweet) for tweet in tweets]\n    # Remove stopwords\n    stopwords = nltk.corpus.stopwords.words('english')\n    tokens = [word for word in tokens if word not in stopwords]\n    # Lemmatize the words\n    lemmatizer = nltk.WordNetLemmatizer()\n    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n    # Return a list of words for each tweet\n    return tokens\n\n# Create a bag-of-words representation for each tweet\ndef create_bow(tweets):\n    # Vectorize the tweets\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(tweets)\n    # Return the bag-of-words representation\n    return X\n\n# Train the Naive Bayes classifier\ndef train_classifier(X, y):\n    # Train a Naive Bayes classifier\n    clf = MultinomialNB()\n    clf.fit(X, y)\n    # Return the trained classifier\n    return clf\n\n# Make predictions using the classifier\ndef predict(clf, X):\n    # Make predictions\n    y_pred = clf.predict(X)\n    # Return the predictions\n    return y_pred",
    "import urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\n\nparsed_url = urllib.parse.urlparse(url)\n\nprint('Protocol:', parsed_url.scheme)\nprint('Domain name:', parsed_url.netloc)\nprint('Path:', parsed_url.path)",
    "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
    "apiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n  - name: tweet-publisher\n    image: username/tweet-publisher\n    command: [\"python\", \"tweet_publisher.py\"]\n    volumeMounts:\n    - name: secrets-volume\n      mountPath: \"/secrets\"\n  volumes:\n  - name: secrets-volume\n    secret:\n      secretName: tweet-secrets\n  restartPolicy: Never\n\n---\n\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: tweet-secrets\ndata:\n  consumer_key: <base64 encoded consumer key>\n  consumer_secret: <base64 encoded consumer secret>\n  access_token: <base64 encoded access token>\n  access_token_secret: <base64 encoded access token secret>",
    "def generate_zeros_array(row, column):\n    zeros_array = [[0 for i in range(column)] for j in range(row)]\n    return zeros_array",
    "numbers_dict = {x: x**2 for x in numbers}",
    "for i in range(1, 51):\n if i % 3 == 0 and i % 5 == 0:\n print(\"FizzBuzz\")\n elif i % 3 == 0:\n print(\"Fizz\")\n elif i % 5 == 0:\n print(\"Buzz\")\n else:\n print(i)",
    "def sqrt(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        guess = n\n        i = 0\n        while guess * guess!= n and i < 20:\n            guess = (guess + n/guess) / 2.0\n            i += 1\n        return guess\n\nprint(sqrt(100))",
    "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length * self.width",
    "import matplotlib.pyplot as plt\n\n# Create data\nx_values = [1,2,3,4,5]\ny_values = [1,8,27,64,125]\n\n# Create the figure\nfig = plt.figure()\n\n# Add the plot to the figure\nplt.plot(x_values, y_values)\n\n# Add labels\nplt.xlabel('x')\nplt.ylabel('y = x**3')\n\n# Add title\nplt.title('Plot of y = x**3')\n\n# Show the plot\nplt.show()",
    "radius = float(input(\"Please enter the radius of the circle: \"))\n\narea = 3.14 * radius * radius\n\nprint(\"The area of the circle is\", area)",
    "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = \"The rain in Spain stays mainly in the plain.\"\nlongest_word = longest_word(sentence)\nprint(longest_word) # \"mainly\"",
    "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius",
    "def isArmstrongNumber(num):\n    n = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False",
    "for i in range(1, 6):\n    for j in range(1, i):\n        print(\"*\", end=\" \")\n    print()",
    "import requests\nfrom bs4 import BeautifulSoup\n\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\nfor stock in stocks:\n    url = f\"https://finance.yahoo.com/quote/{stock}/history?p={stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    prices = soup.find_all('span', {'class': 'Trsdu(0.3s) Fw(b) Fz(36px) Mb(-4px) D(ib)'})\n    print(f\"Current stock price for {stock}: {prices[0].text}\")",
    "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Python wrappers around TensorFlow ops for decoding LibSVM input to tensors.\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\n\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import string_ops\nfrom tensorflow.python.ops import sparse_ops\n\n\ndef decode_libsvm(input,\n                  num_features,\n                  dtype=dtypes.float32,\n                  label_dtype=dtypes.int64,\n                  name=None):\n  \"\"\"Decodes LibSVM input to tensors.\n\n  Args:\n    input: A `Tensor` of type `string`.\n    num_features: An `int` that is `>= 1`.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n    label: A `Tensor` of type `label_dtype`.\n    feature_indices: A `Tensor` of type `int64`.\n    feature_values: A `Tensor` of type `dtype`.\n    feature_shape: A `Tensor` of type `int64`.\n  \"\"\"\n  with ops.name_scope(name, \"decode_libsvm\", [input]):\n    input = ops.convert_to_tensor(input, name=\"input\")\n\n    # Parse the input string to a SparseTensor.\n    indices, values, shape = sparse_ops.string_split(input, delimiter=\",\",\n                                                    max_splits=1)\n    indices = sparse_ops.sparse_to_dense(\n        indices, shape, -1, default_value=-1, name=\"dense_indices\")\n    values = string_ops.string_to_number(values, out_type=dtype, name=\"values\")\n\n    # Create the feature indices.\n    feature_indices = array_ops.reshape(indices, [-1])\n    feature_indices = tf.where(tf.not_equal(feature_indices, -1))\n    feature_indices = tf.gather(feature_indices, 0)\n    feature_indices = tf.reshape(feature_indices, [-1, 1])\n\n    # Create the label.\n    label = array_ops.reshape(indices, [-1])\n    label = tf.where(tf.not_equal(label, -1))\n    label = tf.gather(label, 0)\n    label = tf.reshape(label, [-1, 1])\n    label = tf.cast(label, label_dtype)\n\n    # Create the feature values.\n    feature_values = tf.gather(values, feature_indices[:, 0])\n\n    # Create the feature shape.\n    feature_shape = tf.cast(shape, tf.int64)\n    feature_shape = tf.reshape(feature_shape, [-1])\n    feature_shape = tf.gather(feature_shape, 0)\n\n    return label, feature_indices, feature_values, feature_shape",
    "def sum_dictionary(dictionary):\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum",
    "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/list', methods=['DELETE'])\ndef delete_item():\n    item = request.args.get('item')\n    # code to delete item from list\n    return jsonify({'message': 'Item deleted'})\n\nif __name__ == '__main__':\n    app.run()"
]