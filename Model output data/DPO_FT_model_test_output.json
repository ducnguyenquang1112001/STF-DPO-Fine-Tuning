[
    "def calculate_sum(sequence):\n  total = 0\n  for element in sequence:\n    total = total + element\n  return total\n\nresult = calculate_sum([1, 2, 3, 4, 5])\nprint(result) # 15",
    "def crawl_website_for_emails(url):\n  page = requests.get(url)\n  html = page.text\n  phone_numbers = re.findall(r'\\b\\d{3}\\s\\d{3}\\s\\d{4}\\b', html)\n  return phone_numbers\n\nphone_numbers = crawl_website_for_emails(website)\nprint(phone_numbers)",
    "list = [1, 2, 3, 5, 8, 13]\nsquared_list = [element ** 2 for element in list]\nprint squared_list\n\n# Example usage\nlist = [1, 2, 3, 5, 8, 13]\nsquared_list = [element ** 2 for element in list]\nprint squared_list) # [1, 4, 9, 25, 64, 169]",
    "def remove_duplicates(input):\n    output = []\n    current = \"\"\n    for i in input:\n        if i!= current[0]:\n            output.append(current)\n            current = i\n        else:\n            current += i\n    output.append(current)\n    return \"\".join(output)\n\nremove_duplicates(\"AAABBCCCD\") # \"ABCD\"",
    "def generate_random_number():\n  import random\n  num = random.randint(0, 9)\n  if num % 3 == 0:\n    return num\n\n# Example\ngenerate_random_number() # 0\ngenerate_random_number() # 3\ngenerate_random_number() # 6\ngenerate_random_number() # 9",
    "def getThirdLargest(arr):\n  max1 = max2 = max3 = 0\n  for element in arr:\n    if element > max1:\n      max3 = max2\n      max2 = max1\n      max1 = element\n    elif element > max2 and element < max1:\n      max3 = max2\n      max2 = element\n    elif element > max3 and element < max2:\n      max3 = element\n  return max3\n\narr = [12, 13, 13, 45, 22, 99]\nprint(getThirdLargest(arr)) # 45",
    "def create_resource():\n class Resource(db.Model):\n id = db.Column('id', db.Integer, primary_key = True)\n name = db.Column(db.String(100))\n created_at = db.Column(db.DateTime)\n updated_at = db.Column(db.DateTime)\n \n def __init__(self, name):\n self.name = name\n \n# Initialize Flask application\napp = Flask(__name__)\n \n# Create a URL to create the resource\n@app.route('/resource/create/', methods=['POST'])\ndef create():\n data = request.get_json()\n resource = Resource(name = data['name'])\n db.session.add(resource)\n db.session.commit()\n return jsonify({'resource': 'created successfully!'})\n \n# Create a URL to read the resource\n@app.route('/resource/read/<id>', methods=['GET'])\ndef read(id):\n resource = Resource.query.get(int(id))\n if resource:\n return jsonify({'resource': resource.serialize()})\n else:\n return jsonify({'message': 'Resource not found!'})\n \n# Create a URL to update the resource\n@app.route('/resource/update/<id>', methods=['PUT'])\ndef update(id):\n resource = Resource.query.get(int(id))\n if resource:\n data = request.get_json()\n resource.name = data['name']\n db.session.commit()\n return jsonify({'resource': 'updated successfully!'})\n else:\n return jsonify({'message': 'Resource not found!'})\n \n# Create a URL to delete the resource\n@app.route('/resource/delete/<id>', methods=['DELETE'])\ndef delete(id):\n resource = Resource.query.get(int(id))\n if resource:\n db.session.delete(resource)\n db.session.commit()\n return jsonify({'resource': 'deleted successfully!'})\n else:\n return jsonify({'message': 'Resource not found!'})",
    "def contains_all(words_list, words_string):\n  word_set = set(words_list)\n  words_string_set = set(words_string.split())\n  return word_set <= words_string_set\n\nif contains_all(words_list, words_string):\n  print('Yes')",
    "def is_palindrome(s):\n    # Initialize a variable for storing the reversed string\n    rev = ''\n    \n    # Loop through each character of the input string\n    for i in range(len(s)-1, -1, -1):\n        rev = rev + s[i]\n    \n    # Check if the input string is equal to the reversed string\n    if s == rev:\n        return True\n    else:\n        return False\n\n# Example usage\nif is_palindrome('level'): print('True')\nelse: print('False')",
    "def sort_list(numbers):\n  return sorted(numbers)\n\nnumbers = [17, 41, 5, 22, 54, 6, 29, 3, 13]\nsorted_numbers = sort_list(numbers)\nprint(sorted_numbers)",
    "def add_and_double(x, y):\n  result = (x + y) * 2\n  return result\n\nresult = add_and_double(3, 5)\nprint(result) # output: 16",
    "words = [word for word in sentence.split()]\nnon_vowel_words = [word for word in words if not any(c in 'aeiou' for c in word)]\n\nprint(non_vowel_words)",
    "def calculate_average(numbers):\n  return (sum(numbers) / len(numbers)) \n\nnumbers = [1, 5, 6, 7, 8]\naverage = calculate_average(numbers)\nprint('Average =', average)",
    "def pascal_triangle(rows):\n  triangle = [[1]]\n  for index in range(rows):\n    # Add a new row to the triangle\n    row = [1]\n    for j in range(len(triangle[-1])-1):\n      # Calculate the current value by adding the two numbers above it\n      row.append((triangle[-1][j] + triangle[-1][j+1]))\n    triangle.append(row)\n  return triangle\n\n# Example\ntriangle = pascal_triangle(5)\nprint(triangle)  # [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
    "def decide_winner(player1, player2):\n  r = (player1 == 'rock') and (player2 =='scissors')\n  p = (player1 == 'paper') and (player2 == 'rock')\n  s = (player1 =='scissors') and (player2 == 'paper')\n  if r or p or s:\n    if r:\n      return player1\n    elif p:\n      return player2\n    else:\n      return player2\n\n# Function to play a single round of RPS\ndef play_game():\n  player1 = input('Player 1: Choose rock, paper or scissors: ')\n  player2 = input('Player 2: Choose rock, paper or scissors: ')\n  winner = decide_winner(player1, player2)\n  print('Winner:'+ winner)\n\nif __name__ == '__main__':\n  play_game()",
    "# Initialize the list of classes\nclasses = ['Cat', 'Dog']\n \n# Initialize the list of features\nfeatures = []\n \n# Loop through the images\nfor image in images:\n    # Extract features\n    features.append(extract_features(image))\n \n# Create the training data\ntraining_data = features[:800]\nlabels = [0] * 400 + [1] * 400\n# Create the testing data\ntest_data = features[800:]\n \n# Create the classifier\nclf = tree.DecisionTreeClassifier()\n# Train the classifier\nclf = clf.fit(training_data, labels)\n \n# Predict the labels of the testing set\npredictions = clf.predict(test_data)",
    "def searchNumbersByRangeAndDivisor(numbers, start, end, divisor):\n  for i in numbers:\n    if (i > start and i <= end and (i % divisor) == 0):\n      print(i)",
    "def search_stringneedlehaystack(needle, haystack):\n  return needle in haystack",
    "def findFactorial(num):\n  if num < 0:\n    return 0\n  res = 1\n  for i in range(2, num + 1):\n    res *= i\n  return res\n\nnum = 5\nres = findFactorial(num)\nprint(res)  # output: 120",
    "def predict_class(features):\n    if features[0] > 0 and features[1] > 0 and features[2] > 0 and features[3] > 0:\n        return 1\n    else:\n        return 0",
    "def generate_random_password():\n  import random\n  chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()'\n  password = ''\n\n  for i in range(8):\n    next_index = random.randrange(len(chars))\n    next_char = chars[next_index]\n    password += next_char\n\n  return password\n\npassword = generate_random_password()\nprint(password)\n\n# Output: 'Z9@#qU'\n# Output: 'aZ1q@#'\n# Output: '1w0E@5'",
    "def generate_list(max):\n  list = []\n  current = 0\n  while current <= max:\n    list.append(current)\n    current += 1\n  return list\n\nlist = generate_list(100)\nprint list\n\n# Alternative\nlist = [current for current in generate_list(100)]\nprint list\n\n# Alternative\nlist = list(range(100))\nprint list\n\n# Alternative\nlist = [x for x in range(100)]\nprint list\n\nlist = [int(input()) for i in range(100)]\nprint list\n\nlist = [int(input()) for i in generate_list(100)]\nprint list\n\nlist = [int(input()) for i in range(len(list))]\nprint list\n\nlist = [int(input()) for i in range(len(list))]\nlist = [int(input()) for i in generate_list(len(list))]",
    "def get_tweets(username):\n  f = urllib.request.urlopen(\"http://search.twitter.com/search.json?q=%40\" + username + \"&rpp=5\")\n  json_string = f.read().decode(\"utf-8\")\n  parsed_json = json.loads(json_string)\n  tweets = parsed_json[\"results\"]\n  for tweet in tweets:\n    print(tweet[\"text\"])\n    \nget_tweets(\"@elonmusk\")  # replace with the username of your choice",
    "def predict_next_day_price(price_history):\n  # Initialize the weights\n  w = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  \n  # Perform gradient descent\n  N = len(price_history)\n  learning_rate = 0.0001\n  \n  for epoch in range(100):\n    for idx in range(N):\n      output = 0.0\n      for i in range(len(w)):\n        output += w[i] * price_history[idx - i]\n      error = (output - price_history[idx]) ** 2\n      \n      for i in range(len(w)):\n        w[i] = w[i] - learning_rate * (2 * error * (output - price_history[idx]) * price_history[idx - i])\n  \n  # Predict the next day's price\n  output = 0.0\n  for i in range(len(w)):\n    output += w[i] * price_history[0 - i]\n  return output\n\nprice_history = [10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]\nnext_day_price = predict_next_day_price(price_history)\nprint(next_day_price)",
    "encrypted = \"\"\nfor i in range(len(message)):\n    key_c = key[encrypted_index]\n    # Use 'A' to normalize characters\n    encrypted_char = (ord(message[i]) + ord(key_c)) % 26\n    encrypted += chr(encrypted_char)\n    encrypted_index = (encrypted_index + 1) % len(key)\n\nencrypted_message = encrypted\n\nif message == encrypted_message:\n    print(\"It is a match!\")\n\n# Example usage\nencrypted_message = encrypt_message(message, key)\nprint(encrypted_message)",
    "if parameter_1 > parameter_2:\n  print (parameter_1, 'is larger than', parameter_2)\nelse:\n  print (parameter_2, 'is larger than', parameter_1)",
    "even_numbers = [element for element in range(1, 21) if element % 2 == 0]",
    "def find_fibonacci(num):\n  a = 0\n  b = 1\n  fibonacci = [a, b]\n  for i in range(0, num):\n    c = a + b\n    fibonacci.append(c)\n    a = b\n    b = c\n  \n  return fibonacci\n\nnum = int(input('Enter the number of terms: '))\nfibonacci = find_fibonacci(num)\nprint('First', num, 'terms of Fibonacci sequence are: ')\nprint(fibonacci[0:num+1])",
    "def solveSudoku(board):\n  # Create a copy of the board\n  copy = [row[:] for row in board]\n  # Create a list of empty values\n  values = [set(range(1, 10)) for _ in range(9)]\n  # Create a list of empty sets\n  rows = [[set(), set(), set(), set(), set(), set(), set(), set(), set()] for _ in range(9)]\n  cols = [[set(), set(), set(), set(), set(), set(), set(), set(), set()] for _ in range(9)]\n  boxes = [[set(), set(), set(), set(), set(), set(), set(), set(), set()] for _ in range(9)]\n  # Fill the lists\n  for y in range(9):\n    for x in range(9):\n      if copy[y][x]!= 0:\n        values[y].remove(copy[y][x])\n        rows[y][copy[y][x] - 1].add((x, y))\n        cols[x][copy[y][x] - 1].add((x, y))\n        boxes[(y // 3) * 3 + (x // 3)][copy[y][x] - 1].add((x, y))\n  # Function to check if a given number can be placed at a given position\n  def isValidNum(num, pos):\n    (x, y) = pos\n    if num in values[y]:\n      return True\n    if num in rows[y][x]:\n      return False\n    if num in cols[x][y]:\n      return False\n    if num in boxes[(y // 3) * 3 + (x // 3)][y]:\n      return False\n    return True\n  # Function to place a number\n  def placeNum(num, pos):\n    (x, y) = pos\n    values[y].remove(num)\n    rows[y][num - 1].remove((x, y))\n    cols[x][num - 1].remove((x, y))\n    boxes[(y // 3) * 3 + (x // 3)][num - 1].remove((x, y))\n    board[y][x] = num\n  # Function to find an empty position\n  def findEmptyPos():\n    for y in range(9):\n      for x in range(9):\n        if board[y][x] == 0:\n          return (x, y)\n    return None\n  # Function to solve the puzzle\n  def solve():\n    pos = findEmptyPos()\n    if not pos:\n      return True\n    (x, y) = pos\n    for num in values[y]:\n      if isValidNum(num, (x, y)):\n        placeNum(num, (x, y))\n        if solve():\n          return True\n        board[y][x] = 0\n        values[y].add(num)\n        rows[y][num - 1].add((x, y))\n        cols[x][num - 1].add((x, y))\n        boxes[(y // 3) * 3 + (x // 3)][num - 1].add((x, y))\n    return False\n  # Call the function to solve the puzzle\n  if solve():\n    return copy\n  else:\n    return False\n\n# Output the solved board\nprint(solveSudoku(board))",
    "def addDigits(num):\n s = 0\n while num > 0:\n  s = s + (num % 10)\n  num = int(num / 10)\n return s\n\nnumber = 1234\nresult = addDigits(number)\nprint(\"Sum of the digits in the number:\", result)",
    "list = [John (20), Jane (40), Alex (18), Peter (45)]\ndict = {}\nfor element in list:\n  dict[element[0]] = element[1]",
    "def power(x, y):\n  if y == 0:\n    return 1\n  else:\n    return (x ** y)\n\nresult = power(2, 3)\nprint(result) # 8",
    "def generate_random_number():\n  import random\n  number = random.randint(100000, 999999)\n  return number\n\nnumber = generate_random_number()\nprint(number)\n\n# Output: 498784",
    "def sort_list_length(list):\n  return sorted(list, key=len)\n\nlist = [\"cat\", \"dog\", \"apple\", \"banana\"]\nsorted_list = sort_list_length(list)\nprint(sorted_list)  # Output: ['cat', 'dog', 'banana', 'apple']",
    "def function_max_min(list):\n  max = result = min = list[0]\n  for element in list:\n    if element > max:\n      max = element\n    if element < min:\n      min = element\n  return (max, min)\n\nlist = [4,6,8,9,5,7]\nmax_min = function_max_min(list)\nprint(max_min)  # (9, 4)",
    "for num in my_list:\n  if num % 2 == 0:\n    print(num)",
    "def create_array(size):\n  arr = [0] * size\n  return arr\n\narray = create_array(10)\narray = [float(x) for x in array]",
    "def create_model():\n # Create the model \n model = tf.keras.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(512, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation='softmax')\n ])\n \n # Compile the model\n model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])",
    "def classify_user(input):\n  if input == 'Male':\n    return'male'\n  elif input == 'Female':\n    return 'female'\n  else:\n    return 'unknown'\n\n\nif __name__ == '__main__':\n  input = 'Male'\n  output = classify_user(input)\n  print(output)",
    "result = [A[0]]\ni = 0\nj = 0\n\nif A[0] > B[0]:\n    j += 1\nelse:\n    i += 1\n\nwhile (i < len(A) and j < len(B)):\n    if A[i] > B[j]:\n        result.append(A[i])\n        i += 1\n        j += 1\n    else:\n        result.append(B[j])\n        j += 1\n\nwhile (i < len(A)):\n    result.append(A[i])\n    i += 1\n\nwhile (j < len(B)):\n    result.append(B[j])\n    j += 1\n\nreturn result\n\nsorted_list = sort_list(A, B)\nprint(sorted_list)",
    "def find_lcs(X, Y):\n M = [[0]*(len(Y)+1) for x in range(len(X)+1)]\n for x in range(len(X)+1):\n  for y in range(len(Y)+1):\n   if x == 0 or y == 0:\n    M[x][y] = 0\n if X[0] == Y[0]:\n  M[1][1] = 1\n else:\n  M[1][1] = 0\n \n for c in range(2):\n  for r in range(2):\n   if c == 0 and r == 0:\n    continue\n   elif c == 0 or r == 0:\n    if X[0] == Y[0]:\n     M[1][1] = 1\n     break\n   elif X[0]!= Y[0]:\n    M[1][1] = 0\n    break\n \n for i in range(1, len(X)):\n  for j in range(1, len(Y)):\n   if X[i] == Y[j] and M[i-1][j-1] > 0:\n    M[i][j] = M[i-1][j-1] + 1\n   else:\n    M[i][j] = max(M[i-1][j], M[i][j-1])\n \n lcs = \"\"\n i = len(X) - 1\n j = len(Y) - 1\n while i > 0 and j > 0:\n  if X[i] == Y[j]:\n   lcs = X[i] + lcs\n   i -= 1\n   j -= 1\n  elif M[i-1][j] > M[i][j-1]:\n   i -= 1\n  else:\n   j -= 1\n \n return lcs\n \nX = \"ABCDF\"\nY = \"ABECD\"\nprint(find_lcs(X, Y))",
    "def power(x, y):\n  if y == 0:\n    return 1\n  else:\n    result = 1\n    for i in range(0, y):\n      result *= x\n    return result",
    "# Function to convert a list into a set\n\nlist = [1, 2, 3, 4, 5]\nset = set(list)\nprint(set)\n\n# Function to convert a set into a list\n\nlist = list(set)\nprint(list)",
    "def createBoard():\n  board = []\n  for i in range(n): \n    board.append([0] * n) \n  return board\n\ndef insertMove(board, row, col, move): \n  board[row][col] = move \n\ndef checkWin(board, move): \n  # check rows \n  for x in range(n): \n    win = True\n    for y in range(n): \n      if board[x][y]!= move: \n        win = False\n    if win: \n      return True\n      \n  # check columns \n  for x in range(n): \n    win = True\n    for y in range(n): \n      if board[y][x]!= move: \n        win = False\n    if win: \n      return True\n      \n  # check diagonals \n  win = True\n  for x in range(n): \n    if board[x][x]!= move: \n      win = False\n  if win: \n    return True\n    \n  win = True\n  for x in range(n): \n    if board[x][n-x-1]!= move: \n      win = False\n  if win: \n    return True",
    "if __name__ == \"__main__\":\n  s1 = \"Hello\"\n  s2 = \"World\"\n  print (s1 + \" \" + s2)\n\n# Output\n# Hello World",
    "def intEqual(x, y):\n  if (x == y):\n    return True\n  else:\n    return False\n\nif intEqual(10, 10):\n  print(\"Integers are equal\")",
    "def analyze_sentiment(sentence):\n words = text_to_word_vector(sentence)\n sentiment = 0\n for word in words:\n if word in positive_words:\n sentiment += 1\n elif word in negative_words:\n sentiment -= 1\n else:\n sentiment += 0\n if sentiment > 0:\n return 'Positive'\n elif sentiment < 0:\n return 'Negative'\n else:\n return 'Neutral'\n\nsentence = 'This movie was awesome!'\nanalysis = analyze_sentiment(sentence)\nprint(analysis) # Output: Positive",
    "def calculate_average(numbers):\n  total = 0\n  for num in numbers:\n    total = total + num\n\n  average = total / len(numbers)\n  return average\n\nnumbers = [input('Enter a number: ') for _ in range(5)]\naverage = calculate_average(numbers)\nprint('Average: ', average)",
    "def generate_markov_chain(text):\n  words = text.split()\n  chain = {}\n  for i in range(len(words)-1):\n    key = (words[i], words[i+1])\n    if key not in chain:\n      chain[key] = []\n    chain[key].append(words[i+2])\n  return chain\n\nchain = generate_markov_chain(text)\n# print(chain) # {(Alice, was): [beginning], (was, beginning): [to], (beginning, to): [get], (to, get): [very], (get, very): [tired], (very, tired): [of], (tired, of): [sitting], (of, sitting): [by], (sitting, by): [her], (by, her): [sister], (her, sister): [on], (sister, on): [the], (on, the): [bank], (the, bank): [and], (bank, and): [of], (and, of): [having], (of, having): [nothing], (having, nothing): [to], (nothing, to): [do], (to, do): [once], (do, once): [or], (once, or): [twice], (or, twice): [she], (twice, she): [had], (she, had): [peeped], (had, peeped): [into], (peeped, into): [the], (into, the): [book], (the, book): [her], (book, her): [was], (her, was): [reading], (was, reading): [but], (reading, but): [it], (but, it): [had], (it, had): [no], (had, no): [pictures], (no, pictures): [or], (pictures, or): [conversations], (or, conversations): [in], (conversations, in): [it], (in, it): [and], (it, and): [what], (and, what): [is], (what, is): [the], (is, the): [use], (the, use): [of], (use, of): [a], (of, a): [book], (a, book): [without], (book, without): [pictures], (without, pictures): [or], (pictures, or): [conversation], (or, conversation): [in], (conversation, in): [it], (in, it): [thought], (it, thought): [Alice], (thought, Alice): ['without'], ('without', pictures): [Alice, 'without']: ['pictures', 'or'], ('pictures', 'or'): ['or', 'conversation'], ('or', 'conversation'): ['conversation', 'in'], ('conversation', 'in'): ['in', 'it'], ('in', 'it'): ['it', 'thought'], ('it', 'thought'): ['thought', 'Alice'], ('thought', 'Alice'): ['Alice', ''], ('Alice', ''): ['', '']}\n\ndef generate_sentence(markov_chain):\n  word_list = [random.choice(markov_chain[(word1, word2)]) for word1, word2 in zip(words[:-2], words[1:-1])]\n  return''.join(word_list)\n\nsentence = generate_sentence(chain)\nprint(sentence)\n\n# Output: 'She had no pictures or conversations in it, and what is the use of a book without pictures or conversation?'",
    "def is_prime(num):\n  if num > 1:\n    for i in range(2, int(num ** 0.5) + 1):\n      if (num % i) == 0:\n        return False\n    return True\n  else:\n    return False\n\nnumber = int(input('Enter a number: '))\nif is_prime(number):\n  print('{} is a prime number'.format(number))\nelse:\n  print('{} is not a prime number'.format(number))",
    "def minMax(arr):\n  min = max = arr[0]\n  for element in arr:\n    if element < min:\n      min = element\n    if element > max:\n      max = element\n  return (max - min)",
    "def is_prime(num):\n  if num <= 1:\n    return False\n  \n  for x in range(2, int(num ** 0.5) + 1):\n    if num % x == 0:\n      return False\n  \n  return True",
    "def create_dictionary():\n  keys = [key for key in range(1, 16)]\n  values = [value**2 for value in keys]\n  dictionary = dict(zip(keys, values))\n  return dictionary\n\ndictionary = create_dictionary()\nprint(dictionary)\n\n# Output\n# {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225}",
    "def calculate_sum(numbers):\n  return sum(int(number) for number in numbers if int(number) % 2 == 0) \n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(calculate_sum(numbers))  # Output: 12",
    "def fibonacci(max):\n  a, b = 0, 1\n  result = [0, 1]\n  while b < max:\n    c = a + b\n    result.append(c)\n    a = b\n    b = c\n\n  return result\n\nresult = fibonacci(100)\nprint(result)",
    "def calculate_total(cart):\n total = 0\n for item in cart:\n total += (item['price'] * item['quantity'])\n total += (total * 0.095) # add tax\n total += 7.50 # add shipping\n\n return total\n\ntotal = calculate_total(cart)\nprint('Total cost: ${}'.format(total)) \n\n# Example usage:\ncart = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\ntotal = calculate_total(cart) # total = 72.50",
    "def max_value(dictionary):\n  max_val = 0\n  for k, v in dictionary.items():\n    if type(v) is dict:\n      max_val = max(max_val, max_value(v))\n    else:\n      max_val = max(max_val, v)\n  return max_val\n\nmax_val = max_value(sample_dict)\nprint(max_val)  # 40",
    "def get_date():\n  # Create a datetime object\n  now = datetime.now()\n  # Get current date\n  current_date = now.date()\n  # Get current time\n  current_time = now.time()\n  # Format date\n  formatted_date = current_date.strftime('%A %B %d %I:%M %p')\n  # Format time\n  formatted_time = current_time.strftime('%I:%M %p')\n  return formatted_date +'' + formatted_time\n\n\nresult = get_date()\nprint(result)",
    "def matrixMultiplication(A, B):\n  # Initialize a result matrix with the same number of rows as A and same number of columns as B\n  result = [[0 for x in range(len(B[0]))] for y in range(len(A))]\n  # Multiply matrices\n  for i in range(len(A)):\n    for j in range(len(B[0])):\n      for k in range(len(B)):\n        result[i][j] += A[i][k] * B[k][j]\n  # Return result\n  return result\n\n# Example\nmatrixMultiplication([[1, 2], [3, 4]], [[5, 6], [7, 8]])\n# Output: [[19, 22], [43, 50]]",
    "def find_mean_median(arr):\n  # Find the mean\n  mean = sum(arr) / len(arr)\n\n  # Sort the list\n  sorted_arr = sorted(arr)\n\n  # Find the median\n  if len(sorted_arr) % 2 == 0:\n    median = (sorted_arr[len(sorted_arr) // 2 - 1] + sorted_arr[len(sorted_arr) // 2]) / 2\n  else:\n    median = sorted_arr[len(sorted_arr) // 2]\n\n  return (mean, median)\n\nmean, median = find_mean_median(arr)\nprint('Mean: {0}, Median: {1}'.format(mean, median))",
    "def check_array(arr):\n  return (len(arr) % 2 == 0) \n\nif check_array([1, 2, 3, 4]):\n  print('Even number of elements')",
    "def gini_coefficient(input_list):\n  # Sort the input list in ascending order and calculate the cummulative sum\n  sorted_list = sorted(input_list)\n  sorted_list_cumsum = [sum(sorted_list[:i+1]) for i in range(len(sorted_list))]\n  # Calculate the Gini coefficient\n  gini = (len(sorted_list) + 1) / (sum(sorted_list) + len(sorted_list)) * (2 * sum([pos*(sorted_list_cumsum[pos] - (pos+1)*sorted_list_cumsum[pos-1]) for pos in range(1,len(sorted_list))])\n  return gini\n\n# Example\ngini = gini_coefficient([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\nprint(gini) # 0.9999999999999999",
    "def create_model(input_size):\n  # Initialize the weights\n  W = tf.Variable(tf.random_normal([input_size, 2]))\n  b = tf.Variable(tf.random_normal([2]))\n\n  # Define the model\n  def model(X):\n    return tf.matmul(X, W) + b\n\n# Initialize the model\nmodel = create_model(input_size)\n\n# Construct the graph\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=model(X)))\noptimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)\n\n# Initialize the variables\ninit = tf.global_variables_initializer()\n\n# Start training\nwith tf.Session() as sess:\n  # Run the initializer\n  sess.run(init)\n  \n  # Training cycle\n  for epoch in range(epochs):\n    # Run the optimizer\n    _, cost = sess.run([optimizer, cost], feed_dict={X: X_train, y: y_train})\n    \n    # Calculate accuracy\n    acc = accuracy_score(y_test, np.argmax(sess.run(model, feed_dict={X: X_test}), axis=1))\n    print(\"Epoch:\", epoch+1, \"Cost:\", cost, \"Accuracy:\", acc)",
    "def generate_primes(num):\n  output = [2]\n  k = 3\n  while len(output) < num:\n    for i in output:\n      if (k % i) == 0:\n        break\n    else:\n      output.append(k)\n    k += 2\n  return output\n\nif __name__ == '__main__':\n  print generate_primes(10) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
    "def remove_duplicates(list):\n  seen = set()\n  seen_add = seen.add\n  return [x for x in list if not (x in seen or seen_add(x))]",
    "def sort_list(words):\n  return sorted(words)\n\nsorted_words = sort_list(words)\nprint(sorted_words)",
    "def calcAverage(arr):\n  if len(arr) > 0:\n    return sum(arr) / len(arr) \n  else:\n    return 0\n\nlist = [34, 56, 23, 12, 78, 99]\naverage = calcAverage(list)\nprint(\"Average of list is: \", average)",
    "def is_similar_tree(tree1, tree2):\n  if tree1 and tree2:\n    if (tree1.val == tree2.val and \n        is_similar_tree(tree1.left, tree2.left) and\n        is_similar_tree(tree1.right, tree2.right)):\n      return True\n    else:\n      return False\n  elif (not tree1 and not tree2):\n    return True\n  else:\n    return False\n \n\ntree1 = Node(1)\ntree1.left = Node(2)\ntree1.right = Node(3)\n\ntree2 = Node(1)\ntree2.left = Node(2)\ntree2.right = Node(3)\n\nif is_similar_tree(tree1, tree2):\n  print(\"The trees are similar.\")\nelse:\n  print(\"The trees are not similar.\")",
    "def solveQuadEq(a, b, c):\n  x1 = (-b + (b**2 + 4*a*c)**0.5) / (2*a)\n  x2 = (-b - (b**2 + 4*a*c)**0.5) / (2*a)\n  return [x1, x2]\n\nif __name__ == '__main__':\n  a = 1\n  b = 3\n  c = -4\n  x1, x2 = solveQuadEq(a, b, c)\n  print(x1, x2)\n  \n# output: -4.0 1.0",
    "def addMatrix(A, B):\n  # Initialize the result matrix\n  result = [[0,0,0], [0,0,0], [0,0,0]]\n  # Add the elements of the matrices\n  for i in range(len(A)):\n    for j in range(len(A[0])):\n      result[i][j] = A[i][j] + B[i][j]\n  # Return the result\n  return result\n\n# Test the function\nA = [[1,2,3], [4,5,6], [7,8,9]]\nB = [[1,2,3], [4,5,6], [7,8,9]]\nresult = addMatrix(A, B)\nprint(result)",
    "def find_all_substrings(input_string):\n  output_list = []\n  for i in range(len(input_string)):\n    for j in range(1, len(input_string) - i + 1):\n      output_list.append(input_string[i:i + j])\n  return output_list\n\nif __name__ == '__main__':\n  input_string = 'banana'\n  output_list = find_all_substrings(input_string)\n  print(output_list)",
    "def search_index(arr, x):\n  for i in range(len(arr)):\n    if arr[i] == x:\n      return i\n\nresult = search_index(arr, x)\nif result!= -1:\n  print('Index of', x, 'is', result)",
    "list1 = [3, 9, 15, 21, 27]\nlist2 = [21, 7, 13, 29, 31]\n\ncommon_elements = [element for element in list1 if element in list2]",
    "def numCommonSubstrings(s1, s2):\n  n = 0\n  for i in range(len(s1)):\n    for j in range(len(s2)):\n      if s1[i:i+len(s2)] == s2[0:len(s2)]:\n        n += 1\n  return n\n\nnumCommonSubstrings(s1, s2) # Output: 1",
    "def convert_to_lowercase(input_str):\n  return input_str.lower()  # convert to lowercase\n\nif __name__ == '__main__':\n  print(convert_to_lowercase('Hello World!'))  # output: hello world!",
    "def shuffle_list(input_list):\n  random.shuffle(input_list)\n  return input_list\n\nlist = [1, 2, 3, 4, 5, 6]\nresult = shuffle_list(list)\nprint(result)\n\n# Output: [6, 3, 2, 4, 5, 1]",
    "def validateEmail(email):\n  if len(email) > 7:\n    if re.match(\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\", email):\n      return True\n    else:\n      return False\n  else:\n    return False\n\nresult = [validateEmail(mail) for mail in mail_list]\nprint(result) # [True, False]",
    "result_add = int1 + int2\nresult_sub = int1 - int2\nresult_mul = int1 * int2\nresult_div = int1 / int2\nresult_mod = int1 % int2\n\n# Output\nprint('Addition: {0}'.format(result_add))\nprint('Subtraction: {0}'.format(result_sub))\nprint('Multiplication: {0}'.format(result_mul))\nprint('Division: {0}'.format(result_div))\nprint('Modulo: {0}'.format(result_mod))",
    "def sentiment_analysis(review):\n  words = word_tokenize(review) # tokenization\n  # create a list of n-grams\n  bigram_list = list(ngrams(words, 2))\n  trigram_list = list(ngrams(words, 3))\n  # convert to a bag of words\n  bigram_features = {''.join(bigram): 1 for bigram in bigram_list }\n  trigram_features = {''.join(trigram): 1 for trigram in trigram_list }\n  # add the unigrams to the feature list\n  unigram_features = { word: 1 for word in words }\n  # create a dictionary with all the features\n  features = {**unigram_features, **bigram_features, **trigram_features}\n  # convert the dictionary to a list\n  feature_list = list(features.keys())\n  # create the target list\n  sentiment = int(review[0])\n  target_list = [sentiment]\n  # use the model to predict the sentiment\n  prediction = model.predict([feature_list])[0]\n  # convert the prediction to a label\n  if prediction[0] > 0:\n    prediction = 'Positive'\n  else:\n    prediction = 'Negative'\n  # output the result\n  return (prediction == sentiment)",
    "def remove_duplicates(input_list):\n  if type(input_list)!= list:\n    return input_list\n  \n  seen = set()\n  return [x for x in input_list if x not in seen and not seen.add(x)]",
    "def generate_data():\n  data = list()\n  for i in range(total): \n    name = fake.name()\n    email = fake.email()\n    age = random.randint(18, 60)\n    data.append({'name': name, 'email': email, 'age': age})\n  return data\n \ndata = generate_data()",
    "def classify_sentiment(text):\n words = text\n word_features = {}\n for word in words:\n if word not in word_features:\n word_features[word] = 1\n else:\n word_features[word] += 1\n return word_features\n\nword_features = classify_sentiment(words)\n\npos = 0\nneg = 0\nfor word in word_features:\n if word_features[word] > 0:\n pos += 1\n else:\n neg += 1\nif pos > neg:\n return 'Positive'\nelse:\n return 'Negative'",
    "def get_url_components(url):\n    url_components = url.split('/')\n    return { 'protocol': url_components[0], 'domain': url_components[2], 'path': url_components[3] }\n\nurl_components = get_url_components('https://www.example.com/path/to/file')\nprint(url_components) # {'protocol': 'https', 'domain': 'example.com', 'path': 'path/to/file'}",
    "def generate_fibonacci(max):\n a, b = 0, 1\n fibonacci = [a, b]\n for i in range(2, max):\n c = a + b\n fibonacci.append(c)\n a = b\n b = c\n\n return fibonacci\n\nmax = 10\nresult = generate_fibonacci(max)\nprint(result)",
    "def create_pod():\n  # Create a new pod\n  # Add a volume to store the tweets\n  volume = client.V1Volume(\n    name = \"tweets\",\n    config_map = client.V1ConfigMapProjection(\n      name = \"tweets\"\n    )\n  )\n  volume_mount = client.V1VolumeMount(\n    name = \"tweets\",\n    mount_path = \"/data/tweets\"\n  )\n  # Create a container\n  container = client.V1Container(\n    name = \"tweetbot\",\n    image = \"ubuntu\",\n    command = [\"sh\", \"-c\"],\n    args = \"while true; do sleep 300; echo $(date) > /data/tweets/tweet; done\",\n    volume_mounts = [volume_mount]\n  )\n  # Create a pod\n  template = client.V1PodTemplateSpec(\n    metadata = client.V1ObjectMeta(\n      name = \"tweetbot\"\n    ),\n    spec = client.V1PodSpec(\n      volumes = [volume],\n      containers = [container]\n    )\n  )\n  # Create the pod\n  pod_list = client.V1ListObject(\n    api_version = \"v1\",\n    kind = \"List\",\n    items = [template]\n  )\n  return client.create_namespaced_pod(\"default\", pod_list)\n\nif __name__ == \"__main__\":\n  create_pod()",
    "def createArray(R, C):\n  A = [[0 for c in range(C)] for r in range(R)]\n\n  return A\n\narray = createArray(R, C)\nprint (array)",
    "dictionary = {x : (x ** 2) for x in numbers} \nprint(dictionary) \n\n# Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}",
    "def create_list():\n  list = list(range(1, 51))\n  return list\n\nlist = create_list()\n\nfor element in list:\n  if element % 3 == 0 and element % 5 == 0:\n    print('FizzBuzz')\n  elif element % 3 == 0:\n    print('Fizz')\n  elif element % 5 == 0:\n    print('Buzz')\n  else:\n    print(element)",
    "def get_sqrt(num):\n  return (num**0.5) \n\nresult = get_sqrt(n)\nprint('The square root of %d is %f' % (n, result))",
    "class Rectangle:\n\n  def __init__(self):\n    self.length = 0\n    self.width = 0\n\n  def set_values(self, length, width):\n    self.length = length\n    self.width = width\n\ndef main():\n  rect = Rectangle()\n  rect.set_values(5, 4)\n  print('Length: ', rect.length)\n  print('Width: ', rect.width)\n\nif __name__ == '__main__':\n  main()",
    "def create_data_visualization(input):\n  import matplotlib.pyplot as plt\n  # create a figure\n  fig = plt.figure()\n  # add a subplot\n  ax = fig.add_subplot(111)\n  # create a histogram of input\n  ax.hist(input, bins = [0, 1, 2, 3, 4, 5])\n  # show the plot\n  plt.show()",
    "def main():\n  # input\n  r = input('Enter the value of radius: ')\n\n  # calculate area\n  area = (3.1416 * (float(r)**2))\n\n  # output\n  print('Area =', area)\n\n\nmain()",
    "def find_longest_word(word_list):\n  max_len = 0\n  max_word = None\n  for word in word_list:\n    if len(word) > max_len:\n      max_len = len(word)\n      max_word = word\n  return max_word\n\nword_list = \"The rain in Spain stays mainly in the plain\".split()\nprint(find_longest_word(word_list)) # Output:'stays'",
    "def convert_f_to_c(temp):\n  c = (temp - 32) * 5/9\n  return c\n\ntemp = int(input('Enter a temperature in degrees Fahrenheit: '))\nc = convert_f_to_c(temp)\nprint('{} degrees Fahrenheit is equal to {} degrees Celsius'.format(temp, c))",
    "def is_armstrong_number(candidate):\n  digits = len(str(candidate))\n  total = 0\n  for power in range(0, digits):\n    total += (int(str(candidate)[power]) ** digits)  # convert to int and calculate power\n  return total == candidate\n\n\nif is_armstrong_number(153):\n  print(\"Yes, 153 is an Armstrong number\")\nelse:\n  print(\"No, 153 is not an Armstrong number\")",
    "def print_pattern():\n  pattern = [ [ 0, 0, 0, 0, 0 ], [ 0, 1, 1, 0, 0 ], [ 0, 1, 0, 1, 0 ], [ 0, 1, 1, 1, 0 ], [ 0, 0, 0, 0, 0 ] ]\n  for row in pattern:\n    for item in row:\n      if item == 0:\n        print('  ', end='')\n      else:\n        print(' #', end='')\n  print()\n\nif __name__ == \"__main__\":\n  print_pattern()",
    "def get_latest_stock_price(stock):\n  try:\n    page = requests.get(stock)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    price = soup.find('span', {'class': 'price'}).text\n    return price\n  except:\n    return \"Error\"\n\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\nprices = [get_latest_stock_price(stock) for stock in stocks]",
    "def decode_libsvm(input, num_features, dtype=tf.float32, label_dtype=tf.int64, name=None):\n  with tf.name_scope(name, 'decode_libsvm', [input]):\n    # Convert the input to a list of strings\n    inputs_list = tf.string_split(input,'').values\n\n    # Parse the labels\n    label = tf.to_int64(tf.str_split(inputs_list[0], ':').values[0])\n    inputs_list = inputs_list[1:]\n\n    # Parse the features\n    feature_indices = []\n    feature_values = []\n    feature_shape = []\n    for i in range(num_features):\n      feature_shape.append(1)\n    for i in range(len(inputs_list)):\n      index = int(inputs_list[i]) - 1\n      feature_indices.append(index)\n      feature_values.append(1.0)\n      feature_shape[0] = feature_shape[0] + 1\n    feature_shape = tf.pack(feature_shape)\n    feature_values = tf.pack(feature_values)\n    feature_indices = tf.pack(feature_indices)\n    return (label, feature_indices, feature_values, feature_shape)",
    "total = 0\nfor key in dictionary:\n  total = total + dictionary[key]\n\nprint(total) # 21",
    "def delete_item(list, item):\n  if item in list:\n    list.remove(item)\n    return True\n  else:\n    return False\n\nlist = [1, 2, 3, 4, 5]\nif delete_item(list, 3):\n  print(list)  # [1, 2, 4, 5]"
]