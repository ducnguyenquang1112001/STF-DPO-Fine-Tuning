[
    "def sum_sequence(sequence):\n    sum = 0\n    for i in sequence:\n        sum += i\n    return sum\n\nsum_sequence([1, 2, 3, 4, 5]) # 15",
    "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request to the website\nr = requests.get('http://www.example.com')\n\n# parse the response\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# find all phone numbers on the page\nphone_numbers = soup.find_all('span', {'class': 'phone-number'})\n\n# print the phone numbers\nfor number in phone_numbers:\n print(number.text)",
    "squares = [x**2 for x in [1, 2, 3, 5, 8, 13]]",
    "def remove_duplicates(s): \n    res = \"\" \n    for i in range(len(s)): \n        if i == 0 or s[i]!= s[i-1]: \n            res += s[i] \n    return res",
    "import random\n\ndef generate_random_divisible_by_three():\n    return random.randint(0, 9) if random.randint(0, 9) % 3 == 0 else generate_random_divisible_by_three()\n\nfor _ in range(10):\n    print(generate_random_divisible_by_three())",
    "def get_third_largest(lst):\n    lst.sort()\n    return lst[-3]",
    "from flask import Flask, request, jsonify\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/records', methods=['GET', 'POST'])\ndef records():\n if request.method == 'POST':\n  # Create a new record\n  data = request.get_json()\n  conn = sqlite3.connect('data.db')\n  c = conn.cursor()\n  c.execute('INSERT INTO records VALUES (?,?)', (data['name'], data['value']))\n  conn.commit()\n  c.close()\n  return jsonify({'message': 'Record created successfully.'})\n elif request.method == 'GET':\n  # Read all records\n  conn = sqlite3.connect('data.db')\n  c = conn.cursor()\n  c.execute('SELECT * FROM records')\n  rows = c.fetchall()\n  c.close()\n  return jsonify([{'name': row[0], 'value': row[1]} for row in rows])\n\n@app.route('/records/<name>', methods=['GET', 'PUT', 'DELETE'])\ndef record(name):\n if request.method == 'GET':\n  # Read a single record\n  conn = sqlite3.connect('data.db')\n  c = conn.cursor()\n  c.execute('SELECT * FROM records WHERE name=?', (name,))\n  row = c.fetchone()\n  c.close()\n  return jsonify({'name': row[0], 'value': row[1]})\n elif request.method == 'PUT':\n  # Update a record\n  data = request.get_json()\n  conn = sqlite3.connect('data.db')\n  c = conn.cursor()\n  c.execute('UPDATE records SET value=? WHERE name=?', (data['value'], name))\n  conn.commit()\n  c.close()\n  return jsonify({'message': 'Record updated successfully.'})\n elif request.method == 'DELETE':\n  # Delete a record\n  conn = sqlite3.connect('data.db')\n  c = conn.cursor()\n  c.execute('DELETE FROM records WHERE name=?', (name,))\n  conn.commit()\n  c.close()\n  return jsonify({'message': 'Record deleted successfully.'})\n\nif __name__ == '__main__':\n app.run(debug=True)",
    "def contains_all_words(string, words):\n    words_in_string = string.split()\n    for word in words:\n        if word not in words_in_string:\n            return False\n    return True",
    "def is_palindrome(s):\n    '''Returns true if the given string is a palindrome and false otherwise.'''\n    s = s.lower()\n    return s == s[::-1]",
    "def sort_array(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return arr\n\nprint(sort_array([17, 41, 5, 22, 54, 6, 29, 3, 13]))",
    "def double_add(num1, num2):\n    result = num1 + num2\n    result = result * 2\n    return result",
    "import re\n\ndef extract_non_vowels(sentence):\n    vowels = re.findall(\"[aeiou]\", sentence)\n    non_vowels = re.sub(\"[aeiou]\", \"\", sentence)\n    return non_vowels, vowels\n\nsentence = \"This machine learning project is challenging.\"\nnon_vowels, vowels = extract_non_vowels(sentence)\n\nprint(non_vowels)\nprint(vowels)",
    "def avg_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)\n\nnums = [1, 5, 6, 7, 8]\nresult = avg_list(nums)\nprint(result) # 5.6",
    "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1 \n\npascal_triangle(5)",
    "def decide(player_choice):\n    computer_choice = random.choice(['rock', 'paper','scissors'])\n    if player_choice == computer_choice:\n        return 'draw'\n    elif (player_choice == 'rock' and computer_choice =='scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice =='scissors' and computer_choice == 'paper'):\n        return 'player wins'\n    else:\n        return 'computer wins'",
    "import tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom tensorflow.keras.models import Sequential\n\n# Create the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])",
    "def find_divisible_numbers(m, n, divisor):\n    result = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            result.append(i)\n    return result\n\nprint(find_divisible_numbers(36, 74, 6))",
    "def contains(query, word):\n    if word in query:\n        return True\n    else:\n        return False",
    "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nprint(factorial(5))",
    "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the dataset\ndata = pd.read_csv('dataset.csv')\n\n# Split the dataset into training and test sets\nX = data.drop('class_label', axis=1)\ny = data['class_label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\nclf.fit(X_train, y_train)\n\n# Make predictions\npredictions = clf.predict(X_test)",
    "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())",
    "def generate_list():\n    list = []\n    i = 0\n    while i < 10:\n        list.append(i)\n        i += 1\n    return list",
    "import tweepy\n\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\n\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Set up the authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Create the API object\napi = tweepy.API(auth)\n\n# Get the user's timeline\nuser_timeline = api.user_timeline(screen_name=\"@elonmusk\", count=200, include_rts=False, tweet_mode='extended')\n\n# Print the most recent tweet\nprint(user_timeline[0].full_text)",
    "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define input data\ndata = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n\n# create model\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=7, activation='relu'))\nmodel.add(Dense(1))\n\n# compile model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\n\n# train model\nmodel.fit(data, epochs=100, batch_size=1)\n\n# predict stock price\nprediction = model.predict(data)\nprint(prediction)",
    "import base64\nfrom Crypto.Cipher import AES\n\nmessage = \"Hello world!\"\nkey = \"secret\"\n\nkey = base64.b64encode(key.encode('utf-8'))\nIV = 16 * '\\x00'\nmode = AES.MODE_CBC\ncipher = AES.new(key, mode, IV=IV)\n\nencrypted_message = cipher.encrypt(message.encode('utf-8'))\nprint(encrypted_message)",
    "def find_larger_number(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n        print(parameter_2)\n\nfind_larger_number(parameter_1, parameter_2)",
    "even_numbers = [i for i in range(1,21) if i % 2 == 0]",
    "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nn = int(input(\"Enter a number: \"))\nprint(Fibonacci(n))",
    "def solve(board):\n    # Find the first empty cell\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 0:\n                # If no value is present in the cell, then try different values\n                for num in range(1, 10):\n                    # Check if the number is valid\n                    if isValid(board, i, j, num):\n                        # If valid, then assign the number to the cell\n                        board[i][j] = num\n\n                        # Recursively call the function\n                        if solve(board):\n                                    return True\n\n                        # If no valid number was found, then unassign the number from the cell\n                        board[i][j] = 0\n\n                # If no valid number was found, then the puzzle has no solution\n                return False\n\n    # No empty cells left, so the puzzle is solved\n    return True",
    "def sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum",
    "people_dict = {\n    'John': 20,\n    'Jane': 40,\n    'Alex': 18,\n    'Peter': 45\n}",
    "# define a recursive function to calculate the factorial of a number\ndef factorial(n): \n    # base case \n    if n == 0: \n        return 1\n  \n    # recursive case \n    else: \n        return n * factorial(n-1) \n  \n# take input from the user \nnum = int(input(\"Enter a number: \")) \n  \n# calculate the factorial of the number \nfact = factorial(num) \n  \n# display the result \nprint(\"The factorial of\", num, \"is\", fact)",
    "import random\n\ndef generate_random_number():\n    return random.randint(100000, 999999)\n\nrandom_number = generate_random_number()\nprint(random_number)",
    "def sort_by_length(strings):\n    sorted_list = []\n    while strings:\n        min_length = float('inf')\n        for string in strings:\n            if len(string) < min_length:\n                min_length = len(string)\n                min_string = string\n        sorted_list.append(min_string)\n        strings.remove(min_string)\n    return sorted_list\n\nstrings = [\"cat\", \"dog\", \"apple\", \"banana\"]\nprint(sort_by_length(strings))",
    "def get_max_min(list):\n    max_val = max(list)\n    min_val = min(list)\n    return max_val, min_val\n\nlist = [1, 5, 8, 10, 12, 20]\n\nmax_val, min_val = get_max_min(list)\nprint('Max value:', max_val)\nprint('Min value:', min_val)",
    "for num in my_list:\n    if num % 2 == 0:\n        print(num)",
    "my_array = [float(i) for i in range(0, 11)]",
    "import tensorflow as tf\nfrom tensorflow.keras import datasets\n\n# Load the MNIST data set\n(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()\n\n# Reshape the data\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\n\n# Normalize the data\nx_train = x_train / 255.0\nx_test = x_test / 255.0\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)",
    "import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read data\ndata = pd.read_csv('data.csv')\n\n# Create feature and target vectors\nX = data['text']\ny = data['label']\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit the vectorizer\nvectorizer.fit(X_train)\n\n# Transform the data\nX_train_vectorized = vectorizer.transform(X_train)\nX_test_vectorized = vectorizer.transform(X_test)\n\n# Create and train the classifier\nclassifier = MultinomialNB()\nclassifier.fit(X_train_vectorized, y_train)\n\n# Test the classifier\naccuracy = classifier.score(X_test_vectorized, y_test)\nprint('Accuracy: ', accuracy)",
    "def sort_lists(A, B):\n result = []\n a_pointer = 0\n b_pointer = 0\n\n while a_pointer < len(A) and b_pointer < len(B):\n if A[a_pointer] < B[b_pointer]:\n result.append(A[a_pointer])\n a_pointer += 1\n else:\n result.append(B[b_pointer])\n b_pointer += 1\n\n # Check if there are any remaining elements in A or B\n if a_pointer < len(A):\n result += A[a_pointer:]\n else:\n result += B[b_pointer:]\n\n return result\n\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\nprint(sort_lists(A, B))",
    "def lcs(X, Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    # Following steps to build L[m+1][n+1] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"ABCDF\"\nY = \"ABECD\"\nprint(\"The length of LCS is \", lcs(X, Y))",
    "public static int Power(int x, int y) \n{ \n    if (y == 0) \n        return 1; \n    else\n        return x * Power(x, y - 1); \n}",
    "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)",
    "import random\n\ndef draw_board(board):\n    print('   |   |')\n    print(''+ board[7] +'|'+ board[8] +'|'+ board[9])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(''+ board[4] +'|'+ board[5] +'|'+ board[6])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(''+ board[1] +'|'+ board[2] +'|'+ board[3])\n    print('   |   |')\n\ndef player_choice(board):\n    position = 0\n    \n    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):\n        position = int(input('Choose your position (1-9): '))\n        \n    return position\n\ndef place_marker(board, marker, position):\n    board[position] = marker\n\ndef win_check(board, mark):\n    return ((board[7] == mark and board[8] == mark and board[9] == mark) or\n            (board[4] == mark and board[5] == mark and board[6] == mark) or\n            (board[1] == mark and board[2] == mark and board[3] == mark) or\n            (board[7] == mark and board[4] == mark and board[1] == mark) or\n            (board[8] == mark and board[5] == mark and board[2] == mark) or\n            (board[9] == mark and board[6] == mark and board[3] == mark) or\n            (board[7] == mark and board[5] == mark and board[3] == mark) or\n            (board[9] == mark and board[5] == mark and board[1] == mark))\n\ndef space_check(board, position):\n    return board[position] ==''\n\ndef full_board_check(board):\n    for i in range(1,10):\n        if space_check(board, i):\n            return False\n    return True\n\ndef player1_marker():\n    marker = ''\n    while not (marker == 'X' or marker == 'O'):\n        marker = input('Player 1: Do you want to be X or O? ').upper()\n\n    if marker == 'X':\n        return ('X', 'O')\n    else:\n        return ('O', 'X')\n\ndef main():\n    print('Welcome to Tic Tac Toe!')\n\n    while True:\n        # Reset the board\n        theBoard = [' '] * 10\n        player1_marker = player1_marker()\n        turn = who_goes_first()\n        print('The'+ turn +'will go first.')\n\n        play_game = input('Are you ready to play? Enter Yes or No.')\n\n        if play_game.lower()[0] == 'y':\n            game_on = True\n        else:\n            game_on = False\n\n        while game_on:\n            if turn == 'Player 1':\n                # Player1's turn.\n                draw_board(theBoard)\n                position = player_choice(theBoard)\n                place_marker(theBoard, player1_marker[0], position)\n\n                if win_check(theBoard, player1_marker[0]):\n                    draw_board(theBoard)\n                    print('Congratulations! You have won!')\n                    game_on = False\n                else:\n                    if full_board_check(theBoard):\n                        draw_board(theBoard)\n                        print('The game is a draw!')\n                        break\n                    else:\n                        turn = 'Player 2'\n\n            else:\n                # Player2's turn.\n                draw_board(theBoard)\n                position = player_choice(theBoard)\n                place_marker(theBoard, player1_marker[1], position)\n\n                if win_check(theBoard, player1_marker[1]):\n                    draw_board(theBoard)\n                    print('Player 2 has won!')\n                    game_on = False\n                else:\n                    if full_board_check(theBoard):\n                        draw_board(theBoard)\n                        print('The game is a draw!')\n                        break\n                    else:\n                        turn = 'Player 1'\n\n        if not replay():\n            break\n\nmain()",
    "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)",
    "def is_equal(x, y):\n    if x == y:\n        return True\n    else:\n        return False\n\nfirst_int = 10\nsecond_int = 10\n\nprint(is_equal(first_int, second_int))",
    "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text):\n    # Create a sentiment analyzer\n    sid = SentimentIntensityAnalyzer()\n    # Get the sentiment scores\n    scores = sid.polarity_scores(text)\n    # Get the sentiment label\n    sentiment_label = None\n    if scores['compound'] >= 0.5:\n        sentiment_label = 'positive'\n    elif scores['compound'] <= -0.5:\n        sentiment_label = 'negative'\n    else:\n        sentiment_label = 'neutral'\n    # Return the sentiment label\n    return sentiment_label\n\ntext = 'This is a great movie!'\nsentiment = sentiment_analysis(text)\nprint(sentiment)",
    "def average():\n    nums = []\n    for i in range(5):\n        num = int(input(\"Enter a number: \"))\n        nums.append(num)\n    avg = sum(nums) / len(nums)\n    return avg\n\nprint(average())",
    "import random\n\ndef generate_markov_chain(input_text):\n    words = input_text.split()\n    markov_chain = {}\n    for i in range(len(words) - 1):\n        if words[i] in markov_chain:\n            markov_chain[words[i]].append(words[i+1])\n        else:\n            markov_chain[words[i]] = [words[i+1]]\n    return markov_chain\n\nmarkov_chain = generate_markov_chain(input_text)\n\ndef generate_sentence(markov_chain):\n    sentence = []\n    start_word = random.choice(list(markov_chain.keys()))\n    sentence.append(start_word)\n    while True:\n        if start_word in markov_chain:\n            next_word = random.choice(markov_chain[start_word])\n            sentence.append(next_word)\n            start_word = next_word\n        else:\n            break\n    return''.join(sentence)\n\nprint(generate_sentence(markov_chain))",
    "# Function to check if a number is prime\ndef is_prime(n):\n    # Corner cases \n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    # This is checked so that we can skip  \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n    return True\n\n# Driver Code \nnum = 17\n\nif (is_prime(num)): \n    print(num, \"is a prime number\") \nelse: \n    print(num, \"is not a prime number\")",
    "def diff(arr):\n    return max(arr) - min(arr)\n\narr = [12, 24, 3, 8, -1]\ndifference = diff(arr)\nprint(\"Difference between highest and lowest value is\", difference)",
    "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nfor num in range(2, 101):\n    if is_prime(num):\n        print(num)",
    "d = {k: k*k for k in range(1, 16)}\nprint(d)",
    "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i\n    return result\n\nprint(sum_of_even_numbers(10))",
    "def fibonacci(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a + b\n\nfibonacci(100)",
    "# define a function to calculate the total cost\ndef calculate_total_cost(items, shipping_cost, tax_rate):\n total_cost = 0\n for item in items:\n total_cost += item['price'] * item['quantity']\n \n # add shipping cost\n total_cost += shipping_cost\n \n # add tax\n total_cost *= (1 + tax_rate/100)\n \n return total_cost\n\n# define the items\nitems = [\n {'name': 'widget', 'price': 10, 'quantity': 5},\n {'name': 'thingy', 'price': 7, 'quantity': 3},\n {'name': 'doodad', 'price': 5, 'quantity': 2},\n]\n\n# define the shipping cost and tax rate\nshipping_cost = 7.50\ntax_rate = 9.5\n\n# calculate the total cost\ntotal_cost = calculate_total_cost(items, shipping_cost, tax_rate)\n\n# print the result\nprint('Total cost:', total_cost)",
    "def find_max_value(dictionary):\n    max_value = 0\n    for key, value in dictionary.items():\n        if type(value) is dict:\n            max_value = max(find_max_value(value), max_value)\n        else:\n            max_value = max(value, max_value)\n    return max_value\n\nmax_value = find_max_value(sample_dict)\nprint(max_value)",
    "import datetime\n\ndef get_time_date():\n    return datetime.datetime(2021, 3, 7, 17, 30).strftime(\"%A %B %d %H:%M %p\")",
    "def matrix_multiplication(m1, m2):\n    rows1 = len(m1)\n    cols1 = len(m1[0])\n    rows2 = len(m2)\n    cols2 = len(m2[0])\n    if cols1!= rows2:\n        return \"Error: Incompatible matrix sizes.\"\n\n    result = [[0 for row in range(cols2)] for col in range(rows1)]\n\n    for i in range(rows1):\n        for j in range(cols2):\n            for k in range(cols1):\n                result[i][j] += m1[i][k] * m2[k][j]\n\n    return result",
    "arr = [10, 15, 20, 25, 30, 35]\n\n# Calculate mean\nmean = sum(arr)/len(arr)\nprint(\"Mean of the array: \", mean)\n\n# Calculate median\narr.sort()\nif len(arr) % 2 == 0:\n    median = (arr[int(len(arr)/2)] + arr[int(len(arr)/2 - 1)])/2\nelse:\n    median = arr[int(len(arr)/2)]\nprint(\"Median of the array: \", median)",
    "def check_even_odd(arr):\n    if len(arr) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\narr = [1, 2, 3, 4]\nprint(check_even_odd(arr))",
    "def gini(data):\n    data = sorted(data)\n    n = len(data)\n    gini = 0\n    for i in range(n):\n        gini += (2*i+1-n)*(data[i])\n    return gini/(n*n)\n\ndata = [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]\nprint(gini(data))",
    "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\n\n# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Reshape the data\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\n# Normalize the data\nx_train /= 255\nx_test /= 255\n\n# Build the model\nmodel = Sequential()\nmodel.add(Dense(128, activation='relu', input_shape=(784,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)",
    "def generate_prime_sequence(n):\n    prime_sequence = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            prime_sequence.append(num)\n    return prime_sequence",
    "def remove_duplicates(input_list):\n    new_list = []\n    for item in input_list:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nresult = remove_duplicates([1, 2, 3, 4, 3, 2, 1])\nprint(result)",
    "def sort_words(words):\n    words.sort()\n    return words\n\nwords = ['bubble','selection', 'quicksort', 'insertion']\nprint(sort_words(words))",
    "def average(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)",
    "def is_similar(tree1, tree2):\n    if tree1 is None and tree2 is None:\n        return True\n    if tree1 is None or tree2 is None:\n        return False\n    if tree1.val!= tree2.val:\n        return False\n    return is_similar(tree1.left, tree2.left) and is_similar(tree1.right, tree2.right)",
    "import math\n\ndef solve_quadratic(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # calculate the two solutions\n    sol1 = (-b + math.sqrt(d)) / (2*a)\n    sol2 = (-b - math.sqrt(d)) / (2*a)\n\n    return sol1, sol2\n\n# solve the equation\na = 1\nb = 3\nc = -4\n\ns1, s2 = solve_quadratic(a, b, c)\n\nprint('The solutions are:', s1, s2)",
    "def add_matrix(m1, m2):\n    result = [[0 for x in range(len(m1[0]))] for y in range(len(m1))]\n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n    return result",
    "def print_substrings(s):\n    for i in range(len(s), 0, -1):\n        for j in range(len(s)-i+1):\n            print(s[j:j+i])",
    "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [2, 5, 9, 15]\nx = 5\nprint(find_index(arr, x))",
    "list1 = [3, 9, 15, 21, 27]\nlist2 = [21, 7, 13, 29, 31]\n\ndef find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)",
    "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\ns1 = \"abcd\"\ns2 = \"bae\"\nprint(num_common_substrings(s1, s2))",
    "def to_lowercase(string):\n    return string.lower()",
    "import random\n\ndef shuffle_list(input_list):\n    random.shuffle(input_list)\n    return input_list",
    "def validate_emails(mail_list):\n    valid_emails = []\n    for email in mail_list:\n        if re.match(r'^\\S+@[\\S]+\\.\\S+$', email):\n            valid_emails.append(email)\n    return len(valid_emails) == len(mail_list)",
    "int1 = 10\nint2 = 5\n\n# Addition\nprint(int1 + int2)\n\n# Subtraction\nprint(int1 - int2)\n\n# Multiplication\nprint(int1 * int2)\n\n# Division\nprint(int1 / int2)\n\n# Modulo\nprint(int1 % int2)",
    "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = open('reviews.txt').read().splitlines()\n\n# Tokenize the data\ntokenized_data = [word_tokenize(review) for review in data]\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\nfiltered_data = [word for word in tokenized_data if not word in stop_words]\n\n# Lemmatize the words\nlemmatizer = WordNetLemmatizer()\nlemmatized_data = [lemmatizer.lemmatize(word) for word in filtered_data]\n\n# Generate features using CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(lemmatized_data)\n\n# Split the data into training and test sets\ny = [1 if review['sentiment'] == 'positive' else 0 for review in data]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy:', accuracy)",
    "import re\n\nemails = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\ncleaned_emails = []\n\nfor email in emails:\n    cleaned_email = re.sub('\\+.*', '', email)\n    cleaned_emails.append(cleaned_email)\n\nprint(cleaned_emails)\n# ['bob@example.com', 'bob@cafe.com', 'bob@gmail.com.uk', 'bob@example']",
    "import faker\n\nfake = faker.Faker()\n\nfor _ in range(10):\n name = fake.name()\n email = fake.email()\n age = fake.random_int(min=18, max=80)\n print(name, email, age)",
    "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef classify_sentiment(tweet):\n    sid = SentimentIntensityAnalyzer()\n    sentiment = sid.polarity_scores(tweet)\n    if sentiment['compound'] >= 0.5:\n        return 'positive'\n    elif sentiment['compound'] <= -0.5:\n        return 'negative'\n    else:\n        return 'neutral'\n\ntweet = 'This is a great day!'\nsentiment = classify_sentiment(tweet)\nprint(sentiment)",
    "protocol = 'https'\ndomain_name = 'www.example.com'\npath = '/path/to/file'",
    "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)",
    "apiVersion: v1\nkind: Pod\nmetadata:\n name: tweet-publisher\nspec:\n containers:\n - name: tweet-publisher\n image: <image-url>\n command:\n - python\n args:\n - tweet.py\n volumeMounts:\n - mountPath: /data\n name: volume1\n volumes:\n - name: volume1\n configMap:\n name: tweet-config\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n name: tweet-config\ndata:\n tweet-text: \"I'm tweeting every 5 minutes!\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n name: tweet-publisher\nspec:\n ports:\n - port: 8080\n selector:\n app: tweet-publisher\n type: LoadBalancer",
    "import numpy as np\n\n# Create a two-dimensional array with zeros shapes\narr = np.zeros((3, 3))",
    "numbers_dict = {x:x*x for x in numbers}",
    "for i in range(1, 51):\n if i % 3 == 0 and i % 5 == 0:\n print(\"FizzBuzz\")\n elif i % 3 == 0:\n print(\"Fizz\")\n elif i % 5 == 0:\n print(\"Buzz\")\n else:\n print(i)",
    "import math\n\nn = 100\n\n# calculate the square root of n\nsquare_root = math.sqrt(n)\n\n# print the result\nprint('The square root of', n, 'is', square_root)",
    "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def get_area(self):\n        return self.length * self.width\n\n    def get_perimeter(self):\n        return 2 * (self.length + self.width)",
    "import matplotlib.pyplot as plt\n\n# Create the data\nx = [1,2,3,4,5]\ny = [1,8,27,64,125]\n\n# Create the figure\nplt.figure()\n\n# Plot the data\nplt.plot(x, y)\n\n# Set the title and labels\nplt.title('Data Visualization Dashboard')\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a grid\nplt.grid()\n\n# Show the plot\nplt.show()",
    "# Calculate the area of a circle\n\nradius = float(input(\"Please enter the radius of the circle: \"))\n\narea = 3.14 * (radius ** 2)\n\nprint(\"The area of the circle is:\", area)",
    "def longest_word(sentence):\n    longest_word = \"\"\n    for word in sentence.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = \"The rain in Spain stays mainly in the plain.\"\nlongest_word = longest_word(sentence)\nprint(longest_word)",
    "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius",
    "def is_armstrong_number(num):\n    n = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    return num == sum",
    "for i in range(1, 6):\n    for j in range(1, i):\n        print(\"*\", end=\"\")\n    print()",
    "import requests\nfrom bs4 import BeautifulSoup\n\nstock_list = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\nfor stock in stock_list:\n    url = \"http://www.example.com/\" + stock\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    price = soup.find(\"span\", {\"class\": \"price\"}).text\n    print(\"The current price of {} is {}\".format(stock, price))",
    "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\n\n\ndef decode_libsvm(input,\n                  num_features,\n                  dtype=tf.float32,\n                  label_dtype=tf.int64,\n                  name=None):\n    \"\"\"Decodes LibSVM input to tensors.\n\n    Args:\n        input: a `Tensor` of type `string`.\n        num_features: an `int` that is `>= 1`.\n        dtype: an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n        label_dtype: an optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n        name: a name for the operation (optional).\n\n    Returns:\n        A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n        label: a `Tensor` of type `label_dtype`.\n        feature_indices: a `Tensor` of type `int64`.\n        feature_values: a `Tensor` of type `dtype`.\n        feature_shape: a `Tensor` of type `int64`.\n    \"\"\"\n    with tf.name_scope(name, \"decode_libsvm\", [input]) as name:\n        input = tf.convert_to_tensor(input, name=\"input\")\n        label, feature_indices, feature_values = tf.decode_raw(\n            input, tf.int32, name=name)\n        feature_values = tf.cast(feature_values, dtype)\n        feature_shape = tf.stack([num_features, -1])\n        feature_shape = tf.cast(feature_shape, tf.int64)\n        feature_shape = tf.reshape(feature_shape, [-1])\n        feature_indices = tf.reshape(feature_indices, [-1])\n        feature_values = tf.reshape(feature_values, feature_shape)\n        label = tf.cast(label, label_dtype)\n        return label, feature_indices, feature_values, feature_shape",
    "def compute_sum(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total\n\ndictionary = {'A':5, 'B':6, 'C':10}\nprint(compute_sum(dictionary))",
    "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nitems = []\n\n@app.route('/items', methods=['POST'])\ndef add_item():\n data = request.get_json()\n items.append(data)\n return jsonify({'message': 'Item added successfully'})\n\n@app.route('/items/<string:item_id>', methods=['DELETE'])\ndef delete_item(item_id):\n items = [item for item in items if item['id']!= item_id]\n return jsonify({'message': 'Item deleted successfully'})\n\nif __name__ == '__main__':\n app.run(debug=True)"
]